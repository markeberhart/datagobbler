{
  "version": 8,
  "sources": {
    "countries": {
      "type": "vector",
      // "url": "mapbox://map-id"
      // "url": "Caution-tileserver.com/layer.json",
      "tiles": [location.origin+location.pathname+"countries/{z}/{x}/{y}.pbf"],
      "maxzoom": 6
    }
  },
  "glyphs": location.origin+location.pathname+"font/{fontstack}/{range}.pbf",
  "layers": [{
    "id": "background",
    "type": "background",
    "paint": {
      "background-color": "#ddeeff"
    }
  },{
    "id": "country-glow-outer",
    "type": "line",
    "source": "countries",
    "source-layer": "country",
    "layout": {
      "line-join":"round"
    },
    "paint": {
      "line-color": "#226688",
      "line-width": 5,
      "line-opacity": {
        "stops": [[0,0],[1,0.1]]
      }
    }
  },{
    "id": "country-glow-inner",
    "type": "line",
    "source": "countries",
    "source-layer": "country",
    "layout": {
      "line-join":"round"
    },
    "paint": {
      "line-color": "#226688",
      "line-width": {
        "stops": [[0,1.2],[1,1.6],[2,2],[3,2.4]]
      },
      "line-opacity":0.8,
    }
  // rainbow start
  },{
    "id": "area-white",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'ATA'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#F0F8FF"
    }
  },{
    "id": "area-white",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'ATA'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#F0F8FF"
    }
  },{
    "id": "area-red",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'AFG','ALD','BEN','BLR','BWA','COK','COL','DNK','DOM','ERI','FIN','FRA','FRO','GIB','GNB','GNQ','GRC','GTM','JPN','KIR','LKA','MHL','MMR','MWI','NCL','OMN','RWA','SMR','SVK','SYR','TCD','TON','URY','WLF'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#fdaf6b"
    }
  },{
    "id": "area-orange",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'AZE','BGD','CHL','CMR','CSI','DEU','DJI','GUY','HUN','IOA','JAM','LBN','LBY','LSO','MDG','MKD','MNG','MRT','NIU','NZL','PCN','PYF','SAU','SHN','STP','TTO','UGA','UZB','ZMB'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#fdc663"
    }
  },{
    "id": "area-yellow",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'AGO','ASM','ATF','BDI','BFA','BGR','BLZ','BRA','CHN','CRI','ESP','HKG','HRV','IDN','IRN','ISR','KNA','LBR','LCA','MAC','MUS','NOR','PLW','POL','PRI','SDN','TUN','UMI','USA','USG','VIR','VUT'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#fae364"
    }
  },{
    "id": "area-green",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'ARE','ARG','BHS','CIV','CLP','DMA','ETH','GAB','GRD','GRL','HMD','IND','IOT','IRL','IRQ','ITA','KOS','LUX','MEX','NAM','NER','PHL','PRT','RUS','SEN','SUR','TZA','VAT'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#d3e46f"
    }
  },{
    "id": "area-turquoise",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'AUT','BEL','BHR','BMU','BRB','CYN','DZA','EST','FLK','GMB','GUM','HND','JEY','KGZ','LIE','MAF','MDA','NGA','NRU','SLB','SOL','SRB','SWZ','THA','TUR','VEN','VGB'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#aadb78"
    }
  },{
    "id": "area-blue",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'AIA','BIH','BLM','BRN','CAF','CHE','COM','CPV','CUB','ECU','ESB','FSM','GAZ','GBR','GEO','KEN','LTU','MAR','MCO','MDV','NFK','NPL','PNG','PRY','QAT','SLE','SPM','SYC','TCA','TKM','TLS','VNM','WEB','WSB','YEM','ZWE'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#a3cec5"
    }
  },{
    "id": "area-purple",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'ABW','ALB','AND','ATC','BOL','COD','CUW','CYM','CYP','EGY','FJI','GGY','IMN','KAB','KAZ','KWT','LAO','MLI','MNP','MSR','MYS','NIC','NLD','PAK','PAN','PRK','ROU','SGS','SVN','SWE','TGO','TWN','VCT','ZAF'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#ceb5cf"
    }
  },{
    "id": "area-pink",
    "type": "fill",
    "source": "countries",
    "filter":["in","ADM0_A3",'ARM','ATG','AUS','BTN','CAN','COG','CZE','GHA','GIN','HTI','ISL','JOR','KHM','KOR','LVA','MLT','MNE','MOZ','PER','SAH','SGP','SLV','SOM','TJK','TUV','UKR','WSM'],
    "source-layer": "country",
    "paint": {
      "fill-color": "#f3c1d3"
    }
  // rainbow end
  },{
    "id": "geo-lines",
    "type": "line",
    "source": "countries",
    "source-layer": "geo-lines",
    "paint": {
      "line-color": "#226688",
      "line-width": {
        "stops": [[0,0.2],[4,1]]
      },
      "line-dasharray":[6,2]
    }
  },{
    "id": "land-border-country",
    "type": "line",
    "source": "countries",
    "source-layer": "land-border-country",
    "paint": {
      "line-color": "#fff",
      "line-width": {
        "base":1.5,
        "stops": [[0,0],[1,0.8],[2,1]]
      }
    }
  },{
    "id": "state",
    "type": "line",
    "source": "countries",
    "source-layer": "state",
    "minzoom": 3,
    "filter": ["in","ADM0_A3",'USA','CAN','AUS'],
    "paint": {
      "line-color": "#226688",
      "line-opacity": 0.25,
      "line-dasharray":[6,2,2,2],
      "line-width": 1.2
    }
  // LABELS
  },{
    "id": "country-abbrev",
    "type": "symbol",
    "source": "countries",
    "source-layer": "country-name",
    "minzoom":1.8,
    "maxzoom":3,
    "layout": {
      "text-field": "{ABBREV}",
      "text-font": ["Open Sans Semibold"],
      "text-transform": "uppercase",
      "text-max-width": 20,
      "text-size": {
        "stops": [[3,10],[4,11],[5,12],[6,16]]
      },
      "text-letter-spacing": {
        "stops": [[4,0],[5,1],[6,2]]
      },
      "text-line-height": {
        "stops": [[5,1.2],[6,2]]
      }
    },
    "paint": {
      "text-halo-color": "#fff",
      "text-halo-width": 1.5
    }
  },{
    "id": "country-name",
    "type": "symbol",
    "source": "countries",
    "source-layer": "country-name",
    "minzoom":3,
    "layout": {
      "text-field": "{NAME}",
      "text-font": ["Open Sans Semibold"],
      "text-transform": "uppercase",
      "text-max-width": 20,
      "text-size": {
        "stops": [[3,10],[4,11],[5,12],[6,16]]
      }
    },
    "paint": {
      "text-halo-color": "#fff",
      "text-halo-width": 1.5
    }
  },{
    "id": "geo-lines-lables",
    "type": "symbol",
    "source": "countries",
    "source-layer": "geo-lines",
    "minzoom":1,
    "layout": {
      "text-field": "{DISPLAY}",
      "text-font": ["Open Sans Semibold"],
      "text-offset": [0,1],
      "symbol-placement": "line",
      "symbol-spacing": 600,
      "text-size": 9
    },
    "paint": {
      "text-color": "#226688",
      "text-halo-width": 1.5
    }
  }]
}

On Tue, Feb 28, 2017 at 9:45 PM, mark@markeberhart.com<mailto:mark@markeberhart.com> <mark@markeberhart.com<mailto:mark@markeberhart.com>> wrote:
{
    "version": 8,
    "name": "Standard",
    "constants":{
        "@sans":"Open Sans Regular, Arial Unicode MS Regular",
        "@sans_md":"Open Sans Semibold, Arial Unicode MS Bold",
        "@sans_bd":"Open Sans Bold, Arial Unicode MS Bold",
        "@land-color":"rgba(229,5,219,1)",
        "@states-color":"rgba(22,5,219,1)",
        "@country-primary-color":"rgba(255,255,255,1)",
        "@country-secondary-color":"rgba(244,238,228,1)",
        "@boundary-admin0-color":"rgba(130,130,130,1)",
        "@boundary-admin0-width":3
    },
    "metadata":{},
    "center": [-78.9749,38.7736],
    "zoom":5,
    "sources": {
        "basemap-data": {
            "type":"topojson",
            "url":"world_ver29.json",
            "minzoom":5,
            "maxzoom":14
        },
        "states-data": {
            "type":"topojson",
            "url":"states.json",
            "minzoom":5,
            "maxzoom":14
        }
    },
    "layers": [
        {
            "id": "layer-countries",
            "source": "basemap-data",
            "source-layer": "countries",
            "metadata":{
                "key-name":"Country",
                "display-in-key":"true",
                "filter-out":[{"property":"name","operator":"==","value":"Aruba"}],
                "group-by":["name"]
            },
            "minzoom":0,
            "maxzoom":10,
            "type": "fill",
            "filter": [],
            "paint": {
                "fill-antialias":"true",
                "visibility":"visible",
                "fill-color":"@land-color"
            }
        },
        {
            "id": "layer-boundaries",
            "source": "basemap-data",
            "source-layer": "boundaries",
            "metadata":{
                "key-name":"Boundary",
                "display-in-key":"true",
                "filter-out":[{"property":"adm0_right","operator":"==","value":"Norway"}],
                "group-by":["adm0_a3_r"]
            },
            "minzoom":0,
            "maxzoom":6,
            "type": "line",
            "filter": [],
            "paint": {
                "visibility":"visible",
                "line-opacity":1,
                "line-color":"@boundary-admin0-color",
                "line-width":"@boundary-admin0-width"
            }
        },
        {
            "id": "layer-states",
            "source": "states-data",
            "source-layer": "states",
            "metadata":{
                "key-name":"State",
                "display-in-key":"true",
                "filter-out":[],
                "group-by":["NAME"]
            },
            "minzoom":0,
            "maxzoom":10,
            "type": "fill",
            "filter": [],
            "paint": {
                "fill-antialias":"true",
                "visibility":"visible",
                "fill-color":"@states-color"
            }
        }
    ]
}

On Tue, Feb 28, 2017 at 9:43 PM, mark@markeberhart.com<mailto:mark@markeberhart.com> <mark@markeberhart.com<mailto:mark@markeberhart.com>> wrote:
<html>
<header>
    <title>LastMap ver0.10</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="stylesheet" href="./resources/js/leaflet-1.0.2/leaflet.css">
    <style>

    #map {
        width:auto;
        height:100%;
        /*background-color: rgb(220,241,252);
        margin-right:250px;*/
        margin-right:0px;
    }

    </style>
</header>
<body>

The Map
<div id="map"></div>

</body>

<!-- DataGobbler & lastmap Files -->
<script src="./resources/js/jquery-3.1.1/jquery-3.1.1.min.js"></script>
<script src="./resources/js/d3-4.4.3/d3.min.js"></script>
<script src="./resources/js/d3-4.4.3/d3-geo-projection.min.js"></script>
<script src="./resources/js/leaflet-1.0.2/leaflet-src.js"></script>
<script src="./resources/js/leaflet-1.0.2/proj4.js"></script>
<script src="./resources/js/leaflet-1.0.2/proj4leaflet.js"></script>
<!--<script src="./resources/js/leaflet-1.0.2/Leaflet.VectorGrid.bundled.1.js"></script>-->
<script src="./resources/js/leaflet-1.0.2/geojson-vt-2.2.0.js"></script>


<!-- DataGobbler Files -->
<script src="./resources/js/moment/moment.min.js"></script>
<script src="./resources/js/shapefilejs/shp.min.js"></script>
<script src="./resources/js/d3-4.4.3/topojson-2.2.0.min.js"></script>

<script src="./resources/js/convertFromEsriJson.js"></script>
<script src="./resources/js/datagobbler-0.1.0/datagobbler-0.1.0.js"></script>
<script src="lastmap-0.10.js"></script>

<script>
    //console.log("LastMap ver0.10",lastmap);
    var mapOptions = {
        library:"leaflet", //Supports "leaflet" or "d3"
        projection:"EPSG4326", //Supports "EPSG3857","EPSG4326" for leaflet OR "d3.geo.mercator","d3.geo.equirectangular" for d3
        styleFileUrl:"style.json",
        divID:"map",
        width:800,
        height:200,
        loadedCallbackFunction:onMapLoaded,
        loadingCallbackFunction:onMapLoading
    }

    var _map = lastmap.createMap(mapOptions);
    //console.log("index.html",this);



function onMapLoading(data){
    //console.log("onDataLoading...",data);
}

function onMapLoaded(data){
    console.log("onMapLoaded called.",data);

    d3.json("./resources/data/cities.geojson", function(error,cities) {
        if(error){
            //console.log(error,"JSON error");
        }else{
            console.log("cities",data,cities);
            L.geoJSON(cities.features).addTo(data.map);
        }
    });
}

</script>
</html>



======================================================



/*
DataGobbler version 0.10
Last updated 12/08/2016
*/

!function() {
    datagobbler = {};
    datagobbler.data_layers = {};
    datagobbler.version = '0.10';
    datagobbler.numOfDataFilesToLoad = 0;
    datagobbler.numOfDataFilesLoaded = 0;
    datagobbler.numOfDataFilesToFilter = 0;
    datagobbler.numOfDataFilesFiltered = 0;
    datagobbler.numRecords = 0;
    datagobbler.data = {
        by_date: {inside_range:{},outside_range:{}},
        by_layer_name:{},
        all_data:{
            geospatial:[],
            regular:[],
            objects:[]
        },
        all_dates:{
            byArray:{
                inside_range:[],
                outside_range:[]
            },
            byObject:{
                inside_range:{},
                outside_range:{}
            }
        }
    };

    //load initial json config options
    datagobbler.getData = function(options){
        //console.log("datagobbler.getData",options);
        var _url    = options.configFile;
        var _cb     = options.callbackFunction;
        var _lcb    = options.loadingCallbackFunction;
        d3.json(_url, function(error,data) {
            if(error){
                console.log(error,"JSON error");
            }else{
                datagobbler.ondataLoaded = _cb;
                datagobbler.ondataLoading = _lcb;
                console.log(data);
                //_cb(data);
                datagobbler.data_layers = data.data_layers;
                datagobbler.data_options = data.data_options;
                datagobbler.data_options.dates = datagobbler.setDefaultDates(data.data_options.default_dates);
                datagobbler.setDataOptions();
            }
        });
    }

    datagobbler.setDataOptions = function(){
        this.data_options.default_dates['idate_start'] = this.getCommonTime({time:this.data_options.dates.date_start,format:this.data_options.dates.date_field_format});
        this.data_options.default_dates['idate_end'] = this.getCommonTime({time:this.data_options.dates.date_end,format:this.data_options.dates.date_field_format});
        this.data['data_requests'] = {};
        this.data['proxy_requests'] = {};
        this.data_options.dates['currentDate'] = {
            'year':     this.data_options.dates.date_start.year(),
            'month':    this.data_options.dates.date_start.month()+1,
            'day':      this.data_options.dates.date_start.date(),
            'date': this.data_options.dates.date_start
        }
        var _cnt = 0;// Get quick count of how many data layers we have
        for(dl in datagobbler.data_layers){
            if(!datagobbler.data.by_layer_name[dl]){
                datagobbler.data.by_layer_name[dl] = {};
                //datagobbler.data.by_layer_name[dl]['objects'] = [];
                datagobbler.data.by_layer_name[dl]['all_data'] = {regular:[],geospatial:[],objects:[]};
                datagobbler.data.by_layer_name[dl]['by_date'] = {inside_range:{},outside_range:{}};
                datagobbler.data.by_layer_name[dl]['all_dates'] = { byArray:{inside_range:[],outside_range:[]}, byObject:{inside_range:{},outside_range:{}} };
                datagobbler.data.by_layer_name[dl]['by_group'] = {};
                datagobbler.data.by_layer_name[dl]['errors'] = {};
            }

            _cnt++;
        }

        // Pass the number of data layers we have to datagobbler.numOfDataLayers datagobbler.numOfDataLayers = _cnt;
        //datagobbler.setDefaultDataLayerVisibility();
        datagobbler.createDataServiceUrls();
        datagobbler.loadAllDataLayers();
    }

    datagobbler.setDefaultDates = function(args){
        var _obj = {};
        if(typeof args.date_end === 'string'){
            _obj.date_end = new moment(args.date_end).utc();
            _obj.date_start = new moment(args.date_end).utc();
        }else{
            _t = new moment();
            _obj.date_end = new moment().utc().add(args.date_end,'days');
            _obj.date_start = new moment().utc().add(args.date_end,'days');
        }

        if(typeof args.date_start === 'string'){
            _obj.date_start = new moment(args.date_start).utc();
        }else{
            _obj.date_start.utc().add(args.date_start,'days');
        }

        return _obj;
    }

    // Set visibility object for each layer to use later with legend
    datagobbler.setDefaultDataLayerVisibility = function() {
        //console.log("datagobbler.setDefaultDataLayerVisibility");
        for(dl in datagobbler.data_layers){
            if(datagobbler.data_layers[dl].legend.displayOnStart){
                datagobbler.data_layers[dl]['isVisible'] = true;
            }else{
                datagobbler.data_layers[dl]['isVisible'] = false;
                datagobbler.data_layers[dl]['layerName'] = dl;
            }
        }
    }

    datagobbler.createDataServiceUrls = function() {
        for(dl in datagobbler.data_layers){
            var _url = datagobbler.data_layers[dl].api_info.url;
            var _isOnline = (_url.indexOf("http")>=0);
            //console.log("datagobbler.createDataServiceUrls",_isOnline);
            if(_isOnline){
                _url = datagobbler.createOnlineUrl(_url);
            }
            _url = datagobbler.getProxyUrl(_url,datagobbler.data_layers[dl].api_info.proxy_url);
            // Create an object to track whether a layer has loaded of not.
            datagobbler.data_layers[dl].api_info.url = _url; datagobbler.data_layers[dl]['loadingStatus'] = {'mustDownload':false,'proxyLayer':false,'pendingDownload':false,'downloadCompleted':false,'downloadError':false,'isFiltered':false};
            _url = encodeURIComponent(_url);
            var _args = {'layer':dl,'url':_url};
            datagobbler.checkIfMustDownloadLayerData(_args);
        }
    }

    datagobbler.checkIfMustDownloadLayerData = function(args){
         // Create list of urls to load
        // Add the url and layer name to the datagobbler.data.data_requests object
        if(!datagobbler.data.data_requests[args.url]){
            datagobbler.data.data_requests[args.url] = args.layer;
            datagobbler.data_layers[args.layer]['loadingStatus'].mustDownload = true;
            // Keep track of the number of urls we're actually loading
            // versus the number of layers
            datagobbler.numOfDataFilesToLoad++;
        }else{
            datagobbler.data.proxy_requests[args.layer] = args.url;
            datagobbler.data_layers[args.layer]['loadingStatus'].proxyLayer = datagobbler.data.data_requests[args.url];
        }
    }

    datagobbler.createOnlineUrl = function(_url){
        var _ds = new moment(datagobbler.data_options.dates.date_start);//.format(datagobbler.data_layers[dl].api_info.date_info.date_format); // get date for this layer in a format the API will accept (eg. UNIX, YYYY-MM-DDZ, etc)
        var _de = new moment(datagobbler.data_options.dates.date_end);//.format(datagobbler.data_layers[dl].api_info.date_info.date_format); // get date for this layer in a format the API will accept (eg. UNIX, YYYY-MM-DDZ, etc)
        _ds = _ds.format(datagobbler.data_layers[dl].api_info.url_date_format);
        _de = _de.format(datagobbler.data_layers[dl].api_info.url_date_format);
        _url = _url.replace("{{west}}", datagobbler.data_options.dataBounds.west);
        _url = _url.replace("{{south}}", datagobbler.data_options.dataBounds.south);
        _url = _url.replace("{{east}}", datagobbler.data_options.dataBounds.east);
        _url = _url.replace("{{north}}", datagobbler.data_options.dataBounds.north);
        _url = _url.replace(/\{{date_field}}/g, datagobbler.data_layers[dl].api_info.date_info.date_field); // uses regular expression to replace ALL (the "g" is for global) matching instances of date_field
        _url = _url.replace("{{date_start}}",_ds); // replace start date with the start date we calculated earlier
        _url = _url.replace("{{date_end}}",_de); // replace end date with the end date we calculated earlier
        return _url;
    }

    datagobbler.getProxyUrl = function(_url,_proxyUrl){
        switch(_proxyUrl) {
            case null:
                _url = _url;
                break;
            case 'default':
                _url = datagobbler.data_options.default_proxy_url + _url;
                break;
            default: //custom url
                _url = _proxyUrl + _url;
        }
        return _url;
    }

    datagobbler.showLoadingStatus = function(evt){
        for(s in evt.loadingStatusObject){
            if(evt.loadingStatusObject[s].proxyLayer){
                _pl = evt.loadingStatusObject[s].proxyLayer;
                evt.loadingStatusObject[s].downloadCompleted = evt.loadingStatusObject[_pl].downloadCompleted;
            }
            var _obj = {"layer":s,"title":datagobbler.data_layers[s].title,"loadingStatus":evt.loadingStatusObject[s]};
            datagobbler.ondataLoading(_obj);
        }
    }

    datagobbler.layerHasGeospatialData = function(layer,isGeo){
        datagobbler.data_layers[layer].api_info.has_geospatial_data = isGeo;
    }

    datagobbler.loadAllDataLayers = function(){
        datagobbler['loader'] = document.createEvent("Event");
        datagobbler.loader.initEvent("loadingStatus",true,true);
        datagobbler.loader['loadingStatusObject'] = datagobbler.getLoadingStatusObject();
        document.addEventListener("loadingStatus",datagobbler.showLoadingStatus,false);
        for(dl in datagobbler.data_layers){
            var _mustDownload = datagobbler.data_layers[dl].loadingStatus.mustDownload;
            if(_mustDownload){
                var _filetype = datagobbler.data_layers[dl].api_info.file_type;
                switch(_filetype) {
                    case "topojson":
                        datagobbler.layerHasGeospatialData(dl,true);
                        datagobbler.downloadDataTOPOJSON(dl);
                        break;
                    case "geojson":
                        datagobbler.layerHasGeospatialData(dl,true);
                        datagobbler.downloadDataGEOJSON(dl);
                        break;
                    case "arcjson":
                        datagobbler.layerHasGeospatialData(dl,true);
                        datagobbler.downloadDataARCJSON(dl);
                        break;
                    case "shp":
                        datagobbler.layerHasGeospatialData(dl,true);
                        datagobbler.downloadDataSHP(dl);
                        break;
                    case "csv":
                        datagobbler.checkIfGeospatial(dl);
                        datagobbler.downloadDataCSV(dl);
                        break;
                    case "shp.zip":
                        datagobbler.layerHasGeospatialData(dl,true);
                        datagobbler.downloadDataSHPZIP(dl);
                        break;
                }
            }
        }
    }

    datagobbler.checkIfGeospatial = function(layer){
        var _hasLatLonInfo = (datagobbler.data_layers[layer].api_info.if_not_geospatial_file_type.field_to_use_for_latitude !=null && datagobbler.data_layers[layer].api_info.if_not_geospatial_file_type.field_to_use_for_longitude !=null);
        if(_hasLatLonInfo){;
            datagobbler.layerHasGeospatialData(layer,true);
        }else{
            datagobbler.layerHasGeospatialData(layer,false);
        }
    }

    datagobbler.loadAllProxyDataLayers = function(){
        //console.log('NOW LOAD PROXIES...');//,datagobbler.data_layers);//,datagobbler.data.proxy_requests);
        for(p in datagobbler.data.proxy_requests){

            var _proxyUrl = datagobbler.data.proxy_requests[p];
            var _targLayer = datagobbler.data.data_requests[_proxyUrl];

            datagobbler.data_layers[p].api_info.data = $.extend(true,{},datagobbler.data_layers[_targLayer].api_info.data);
            datagobbler.data_layers[p].api_info.objects = $.extend(true,[],datagobbler.data_layers[_targLayer].api_info.objects);

            if(datagobbler.data_layers[_targLayer].layerOkToFilter){
                datagobbler.layerOkToFilter(p);
            }else{
                datagobbler.layerNotOkToFilter(p);
                console.log("DON'T DO ANYTHING WITH " + p +", because " + _targLayer + " did not download!");
                var _error = {'notes':'This is a proxy layer that pulls from a golden copy. The gold copy did not download, which means the derrivative/proxy copy could not be created.','proxyLayer':p,'targetLayer':_targLayer};
                datagobbler.logSystemErrorForLayer({'layer':p,'errorEvent':_error});
            }
        }

    }

    datagobbler.getDataType = function(type){
        // accepts type as a string
        var _type = type.toLowerCase();
        var _geom_type;
        //console.log("datagobbler.getDataType: ",_type);

        switch(_type) {
            case "point":
                _geom_type = "point";
                break;
            case "linestring":
                _geom_type = "linestring";
                break;
            case "multilinestring":
                _geom_type = "multilinestring";
                break;
            case "polygon":
                _geom_type = "polygon";
                break;
            case "multipolygon":
                _geom_type = "multipolygon";
                break;
            default:
                _geom_type = null;
                break;
        }
        return {"name":"geometry_type","type":_geom_type};

    }

    datagobbler.downloadDataTOPOJSON = function(layer){
        //console.log('datagobbler.downloadDataJSON');
        var _url = datagobbler.data_layers[layer].api_info.url;
        var _loadingStatus = datagobbler.data_layers[layer].loadingStatus;
        //console.log(_url);
        _loadingStatus.pendingDownload = true;
        d3.json(_url, function(error,data) { //console.log('JSON done.',data,_url);
            _loadingStatus.pendingDownload = false;
            if(error){
                _loadingStatus.downloadCompleted = false;
                _loadingStatus.downloadError = true;
                datagobbler.data_layers[layer].api_info['data'] = null;
                datagobbler.DownloadError(layer,error);
                console.log(layer,"==== >> JSON error <<====");
            }else{
                _loadingStatus.downloadCompleted = true;

                datagobbler.data_layers[layer].api_info['data'] = data;
                datagobbler.DownloadSuccess(layer);
                datagobbler.decodeDataTOPOJSON(layer);
            }
        });

    }

    datagobbler.decodeDataTOPOJSON = function(layer){
        var _data = datagobbler.data_layers[layer].api_info.data;
        var _arr = [];
        var _filetype = datagobbler.data_layers[dl].api_info.file_type;
        for(k in _data.objects){
            var _obj = topojson.feature(_data, _data.objects[k]);
            _obj.has_geospatial_data = datagobbler.data_layers[layer].api_info.has_geospatial_data;
            var _type = datagobbler.getDataType(_data.objects[k].geometries[0].type);
            _obj[_type.name<Caution-type.name>] = _type.type;
            _obj.name<Caution-obj.name> = k;
            _arr.push(_obj);
        }
        datagobbler.data_layers[layer].api_info['objects'] = _arr;
        datagobbler.checkGlobalDownloadStatus();
    }

    datagobbler.downloadDataGEOJSON = function(layer){
        //console.log('datagobbler.downloadDataJSON');
        var _url = datagobbler.data_layers[layer].api_info.url;
        var _loadingStatus = datagobbler.data_layers[layer].loadingStatus;
        //console.log(_url);
        _loadingStatus.pendingDownload = true;
        d3.json(_url, function(error,data) { //console.log('JSON done.',data,_url);
            _loadingStatus.pendingDownload = false;
            if(error){
                _loadingStatus.downloadCompleted = false;
                _loadingStatus.downloadError = true;
                datagobbler.data_layers[layer].api_info['data'] = null;
                datagobbler.DownloadError(layer,error);
                console.log(layer,"==== >> JSON error <<====");
            }else{
                //console.log("GEOJSON",data);
                _loadingStatus.downloadCompleted = true;
                datagobbler.data_layers[layer].api_info['data'] = data;
                datagobbler.DownloadSuccess(layer);
                datagobbler.decodeDataGEOJSON(layer);
            }
        });

    }

    datagobbler.decodeDataGEOJSON = function(layer){
        var _data = datagobbler.data_layers[layer].api_info.data;
        var _arr = [];
        var _filetype = datagobbler.data_layers[dl].api_info.file_type;
        //_arr[] = _data;
        //for (i = 0; i < _data.length; i++) {
        var _type = datagobbler.getDataType(_data.features[0].geometry.type);
        _data[_type.name<Caution-type.name>] = _type.type;
        _data.has_geospatial_data = datagobbler.data_layers[layer].api_info.has_geospatial_data;
        _data.name<Caution-data.name> = layer;
        _arr.push(_data);
        datagobbler.data_layers[layer].api_info['objects'] = _arr;
        //console.log("decodeDataGEOJSON-objects: ",_data,datagobbler.data_layers[layer].api_info.objects);
        datagobbler.checkGlobalDownloadStatus();
        //console.log(datagobbler.data_layers,"datagobbler.decodeDataJSON",_arr);
    }

     datagobbler.downloadDataARCJSON = function(layer){

        var _url = datagobbler.data_layers[layer].api_info.url;
        var _loadingStatus = datagobbler.data_layers[layer].loadingStatus;
        console.log('datagobbler.downloadDataARCJSON',_url);
        _loadingStatus.pendingDownload = true;
        d3.json(_url, function(error,data) { //console.log('JSON done.',data,_url);
            _loadingStatus.pendingDownload = false;
            if(error){
                _loadingStatus.downloadCompleted = false;
                _loadingStatus.downloadError = true;
                datagobbler.data_layers[layer].api_info['data'] = null;
                datagobbler.DownloadError(layer,error);
                console.log(layer,"==== >> JSON error <<====");
            }else{
                _loadingStatus.downloadCompleted = true;
                var _esri = esriConverter();
                var _geojson = _esri.toGeoJson(data);
                console.log(data);
                datagobbler.data_layers[layer].api_info['data'] = _geojson;
                datagobbler.DownloadSuccess(layer);
                datagobbler.decodeDataGEOJSON(layer);
            }
        });

    }


    datagobbler.downloadDataSHP = function(layer){
        console.log("datagobbler.downloadDataSHP",layer);
        var _data = datagobbler.data_layers[layer].api_info.data;
        //var _arr = [];
        var _filetype = datagobbler.data_layers[dl].api_info.file_type;
        var _loadingStatus = datagobbler.data_layers[layer].loadingStatus;
        var _url = datagobbler.data_layers[layer].api_info.url;
            _url = _url.substring(0,_url.lastIndexOf("."));
        console.log("_url:",_url);
        var _shpLoader = shp(_url).then(
            function(data){ //If successful loading
                console.log("Loaded Shapefile!");
                _loadingStatus.downloadCompleted = true;
                var _arr = [];
                _arr[0] = data;
                datagobbler.data_layers[layer].api_info['data'] = _arr;
                //datagobbler.data_layers[layer].api_info['objects'] = data;
                datagobbler.DownloadSuccess(layer);
                datagobbler.decodeDataSHPGEOJSON(layer); //TODO make sure we get geojson into an array format like the others
            },
            function(event){ //If fails to load
                //console.log("Sorry, could not load Shapefile.");
                _loadingStatus.downloadCompleted = false;
                _loadingStatus.downloadError = true;
                datagobbler.data_layers[layer].api_info['data'] = null;
                datagobbler.data_layers[layer].api_info['objects'] = null;
                datagobbler.DownloadError(layer,event);
            }
        );
    _shpLoader['layer'] = layer;
    }

    datagobbler.downloadDataSHPZIP = function(layer){
        //console.log("datagobbler.downloadDataSHPZIP called");
        var _data = datagobbler.data_layers[layer].api_info.data;
        var _arr = [];
        var _filetype = datagobbler.data_layers[dl].api_info.file_type;
        var _loadingStatus = datagobbler.data_layers[layer].loadingStatus;
        var _url = datagobbler.data_layers[layer].api_info.url;
            _url = _url.substring(0,_url.lastIndexOf("."));
            _url=_url+".zip";
        var _shpLoader = shp(_url).then(
            function(data){ //If successful loading
                //console.log("downloadDataSHPZIP",data);
                _loadingStatus.downloadCompleted = true;
                datagobbler.data_layers[layer].api_info['data'] = data;
                datagobbler.DownloadSuccess(layer);
                datagobbler.decodeDataSHPGEOJSON(layer); //TODO make sure we get geojson into an array format like the others
            },
            function(event){ //If fails to load
                //console.log("Sorry, could not load Shapefile.",event);
                datagobbler.logSystemErrorForLayer({'layer':layer,'errorEvent':event});
                _loadingStatus.downloadCompleted = false;
                _loadingStatus.downloadError = true;
                datagobbler.data_layers[layer].api_info['data'] = null;
                datagobbler.data_layers[layer].api_info['objects'] = null;
                datagobbler.DownloadError(layer,event);
            }
        );
        _shpLoader['layer'] = layer;
    }

    datagobbler.decodeDataSHPGEOJSON = function(layer){

        var _data = datagobbler.data_layers[layer].api_info.data;
        for(d in _data){
            var _type = datagobbler.getDataType(_data[d].features[0].geometry.type);
            //console.log(d,_type);
            _data[d][_type.name<Caution-type.name>] = _type.type;
            if(_data[d].fileName){
                _data[d]['name'] = _data[d].fileName;
            }else{
                _data[d]['name'] = "default";
            }
            _data[d].has_geospatial_data = datagobbler.data_layers[layer].api_info.has_geospatial_data;
        }

        datagobbler.data_layers[layer].api_info['objects'] = _data;
        datagobbler.checkGlobalDownloadStatus();
    }

    datagobbler.downloadDataCSV = function(layer){

        var _loadingStatus = datagobbler.data_layers[layer].loadingStatus;
        var _url = datagobbler.data_layers[layer].api_info.url;
        datagobbler.data_layers[layer].api_info['fileName'] = ( _url.substring(_url.lastIndexOf("/")+1,_url.lastIndexOf(".")) + "." + datagobbler.data_layers[dl].api_info.file_type);
        _loadingStatus.pendingDownload = true;
        d3.csv(_url, function(error,data) { //console.log('JSON done.',data,_url);
            _loadingStatus.pendingDownload = false;
            if(error){
                _loadingStatus.downloadCompleted = false;
                _loadingStatus.downloadError = true;
                datagobbler.data_layers[layer].api_info['data'] = null;
                datagobbler.DownloadError(layer,error);
            }else{
                _loadingStatus.downloadCompleted = true;
                //console.log("CSV", data);
                datagobbler.data_layers[layer].api_info['data'] = data;
                datagobbler.DownloadSuccess(layer);
                datagobbler.decodeDataCSV(layer);
            }
        });
    }

     datagobbler.decodeDataCSV = function(layer){
        var _data       = datagobbler.data_layers[layer].api_info.data;//$.extend(true,[],datagobbler.data_layers[layer].api_info.data);
         var _arr = [];
         /*
         If it's not geospatial, then don't build-out object records as geojson
         If it's geospatial, build-out objects as geojson
         Each object has an array of objects that contains all the data objects for that sub-layer (or default layer)
         */
         //if geospatial, then... has_geospatial_data
         if(Boolean(datagobbler.data_layers[layer].api_info.has_geospatial_data) == true){
             //console.log("=> IS geospatial data.");
            var _geomType   = datagobbler.data_layers[layer].api_info.if_not_geospatial_file_type.geometry_type;
            var _latStr     = datagobbler.data_layers[layer].api_info.if_not_geospatial_file_type.field_to_use_for_latitude;
            var _lonStr     = datagobbler.data_layers[layer].api_info.if_not_geospatial_file_type.field_to_use_for_longitude;
            var _features = [];
            var _geojsonObj = {"type":"FeatureCollection","fileName":datagobbler.data_layers[layer].api_info['fileName']};
            for (i = 0; i < _data.length; i++) {
                var _do = _data[i];
                var _lat = Number(_do[_latStr]);
                var _lon = Number(_do[_lonStr]);

                var _featureObj = {
                    "geometry":{
                            "type":"Point",
                            "coordinates":[_lon,_lat]
                    },
                    "properties":_do,
                    "type":"Feature"
                };
                _features.push(_featureObj);
            }
            _geojsonObj.features = _features;
            var _type = datagobbler.getDataType(_features[0].geometry.type);
            _geojsonObj[_type.name<Caution-type.name>] = _type.type;
            _geojsonObj.has_geospatial_data = datagobbler.data_layers[layer].api_info.has_geospatial_data;
            _arr.push(_geojsonObj);
         }else{
             //console.log("=> IS NOT geospatial data.");
             for (i = 0; i < _data.length; i++) {
                _data[i] = {"properties":_data[i]};
             }
             var _recordsObj = {
                 "has_geospatial_data":datagobbler.data_layers[layer].api_info.has_geospatial_data,
                 "features":_data
             };
             var _type = datagobbler.getDataType("none");
            _recordsObj[_type.name<Caution-type.name>] = _type.type;
             _arr[0] = _recordsObj;
         }
         //else, just set arr to the normal data (_arr = _data)
         //end if
        datagobbler.data_layers[layer].api_info['objects'] = _arr; //
        //console.log("decodeDataCSV",datagobbler.data_layers[layer].api_info.objects);
        datagobbler.checkGlobalDownloadStatus();
    }

    datagobbler.logSystemErrorForLayer = function(args){
        datagobbler.data.by_layer_name[args.layer].errors['systemError'] = args.errorEvent;
    }

    datagobbler.DownloadSuccess = function(layer){
        //console.log(layer,"datagobbler.DownloadSuccess");
        document.dispatchEvent(datagobbler.loader);
        datagobbler.layerOkToFilter(layer);
        datagobbler.numOfDataFilesLoaded++;
        //datagobbler.numOfDataFilesToFilter++;
         //console.log("-------------------------------");
    }

    datagobbler.DownloadError = function(layer,errorEvent){
        //console.log(layer,"datagobbler.DownloadError");
        datagobbler.logSystemErrorForLayer({'layer':layer,'errorEvent':errorEvent});
        datagobbler.layerNotOkToFilter(layer);
        datagobbler.numOfDataFilesToLoad--;
        //datagobbler.data.databy_layer_name[layer].errors.push("Error downloading data.");
        //datagobbler.numOfDataFilesToFilter--;
    }

    datagobbler.getDownloadErrorObject = function(){
        var _tempObj = {};
        for(dl in datagobbler.data_layers){
            if(datagobbler.data_layers[dl].loadingStatus.downloadError){
                _tempObj[dl] = datagobbler.data_layers[dl];
            }
        }
        return _tempObj;
    }

    datagobbler.getDownloadSuccessObject = function(){
        var _tempObj = {};
        for(dl in datagobbler.data_layers){
            if(datagobbler.data_layers[dl].loadingStatus.downloadCompleted){
                _tempObj[dl] = datagobbler.data_layers[dl];
            }
        }
        return _tempObj;
    }

    datagobbler.getLoadingStatusObject = function(){
        //datagobbler.data_layers[dl].loadingStatus, for(dl in datagobbler.data_layers){
        var _tempObj = {};
        for(dl in datagobbler.data_layers){
            _tempObj[dl] = datagobbler.data_layers[dl].loadingStatus;
        }
        return _tempObj;
    }

    datagobbler.layerOkToFilter = function(layer){
        datagobbler.numOfDataFilesToFilter++;
       datagobbler.data_layers[layer]['layerOkToFilter'] = true;
    }

    datagobbler.layerNotOkToFilter = function(layer){
       datagobbler.data_layers[layer]['layerOkToFilter'] = false;
    }

    datagobbler.filterSuccess = function(layer){
        datagobbler.data_layers[layer].loadingStatus.isFiltered = true;
        document.dispatchEvent(datagobbler.loader);
    }

    /*
    Checks to see if the number of files to be downloaded matches the number already downloaded. If so, then create the proxy layers- "proxy" layers are layers that copy & reuse data from previously downloaded layers so we're not downloading the same data multiple times.
    */
    datagobbler.checkGlobalDownloadStatus = function(){
        if(datagobbler.numOfDataFilesToLoad == datagobbler.numOfDataFilesLoaded){
            datagobbler.loadAllProxyDataLayers();
            datagobbler.allDataLayersAreReadyToFilter();
        }
    }

    datagobbler.allDataLayersAreReadyToFilter = function(){
        /*
        If there was no download error (it's still false), then set
        the downloadCompleted property to true
        */
        for(dl in datagobbler.data_layers){
            if(!datagobbler.data_layers[dl].loadingStatus.downloadError){
                datagobbler.data_layers[dl].loadingStatus.downloadCompleted = true;
            }
        }
        datagobbler.filterAllLayers();
    }

    datagobbler.filterAllLayers = function(){
        //console.log("datagobbler.filterAllLayers",datagobbler.data_layers);
        for(dl in datagobbler.data_layers){
            if(datagobbler.data_layers[dl].layerOkToFilter){
                datagobbler.data_layers[dl].api_info.objects = datagobbler.filterDataLayer(dl);
                //console.log("----------------------------");
                //console.log("datagobbler.data_layers[dl].api_info.objects",dl);
                //console.log(datagobbler.data_layers[dl].api_info.objects);
            }
        }
        //DataGobbler is finished!
        datagobbler.ondataLoaded(datagobbler.data);
    }

    datagobbler.filterDataLayer = function(layer){

        var _objects        = datagobbler.data_layers[layer].api_info.objects;
        var _dateField      = datagobbler.data_layers[layer].api_info.date_info.date_field;
        var _filterOutArr   = datagobbler.data_layers[layer].api_info.filter_out;
        var _dateFormat     = datagobbler.data_layers[layer].api_info.date_info.date_field_format;

        //var _fileType       = datagobbler.data_layers[layer].api_info.file_type;
        //console.log(datagobbler.data_layers[layer].api_info.single_layer_only);
        // If it is a topojson file matching Mapbox style, focus on just one layer
        // for each mapbox style layer
        if(datagobbler.data_layers[layer].api_info.single_layer_only){
            function arrayFilter(value) {
                console.log("topojson filtering:",value.name<Caution-value.name>, "=", value.name<Caution-value.name> == datagobbler.data_layers[layer].title);
                return value.name<Caution-value.name> == datagobbler.data_layers[layer].title;
            }
            //console.log(datagobbler.data_layers[layer].title);
            //var _sourceDataObjects = lastmap.mapData.raw.by_layer_name[_styleSource].all_data.objects;
            _objects = _objects.filter(arrayFilter);
        }
        //console.log("Filtering "+ layer, _objects);
        //console.log(_objects.length + " objects found.")
        //console.log(_objects);
        for(k in _objects){

            _objects[k]['data_layer'] = layer;
            _objects[k].featuresFiltered = [];
            //console.log("Object #"+k+":",_objects[k]);
            var _features = _objects[k].features;
            var _temp_features = [];
            var _is_temporal;
            if(_features[0].properties[_dateField]){
                _is_temporal = true;
            }else{
                _is_temporal = false;
            }
            datagobbler.data_layers[layer].api_info.objects[k].is_temporal = _is_temporal;

            for(f in _features){
                //console.log(f);
                var _keepFeature = true;
                if(_keepFeature){
                    if(_is_temporal){

                        var _time;
                        // verify whether the time/date field is meant to be
                        // text or a number
                        if(isNaN(Number(_features[f].properties[_dateField]))){
                            _time = _features[f].properties[_dateField]; //treat as text
                        }else{
                            _time = Number(_features[f].properties[_dateField]); //treat as a number (eg. UNIX)
                        }
                        //isNaN(
                        //console.log("_dateField",_dateField);
                        //console.log(_features[f]);
                        _features[f].properties["idate"] = _time;
                        _features[f].properties["itime"] = datagobbler.getCommonTime({time:_time,format:_dateFormat});
                        _features[f].properties["prettytime"] = datagobbler.getCommonTime({time:_time,format:_dateFormat}).prettytime;
                        _features[f].properties["numbertime"] = datagobbler.getCommonTime({time:_time,format:_dateFormat}).numbertime;

                        if(_features[f].properties["itime"].isInGlobalDateRange){
                            //datagobbler.checkForDataLayerDateInRangeObject(layer,_features[f].properties["itime"]);
                            _keepFeature = true;
                        }else{
                            //datagobbler.checkForDataLayerDateOutsideRangeObject(layer,_features[f].properties["itime"]);
                            _keepFeature = false;
                        }
                        //console.log("IS_TEMPORAL");
                    }else{
                        datagobbler.data_layers[layer].api_info.is_temporal = false;
                        _keepFeature = true;
                    }
                }

                if(_keepFeature){
                    if(_filterOutArr.length>0){
                        //console("_filterOutArr exists!");
                        for(fo in _filterOutArr){
                             var _filterOutArgs = {};
                            _filterOutArgs = {
                                'property':_filterOutArr[fo].property,
                                'operator':_filterOutArr[fo].operator,
                                'val1':_features[f].properties[_filterOutArr[fo].property],
                                'val2':_filterOutArr[fo].value
                            };
                            if(datagobbler.getFilter(_filterOutArgs)){
                                _keepFeature = false;
                            }

                        }
                    }
                    //console.log(_keepFeature,_filterOutArgs);
                }

                _features[f].id = datagobbler.numRecords;
                var _args = {
                    feature:_features[f],
                    keepFeature:_keepFeature,
                    has_geospatial_data:_objects[k].has_geospatial_data,
                    geometry_type:_objects[k].geometry_type,
                    name:_objects[k].name,
                    layer:layer,
                    is_temporal:_is_temporal
                };
                datagobbler.numRecords++;
                if(_keepFeature){
                    _objects[k].featuresFiltered.push(_features[f]);
                }
                datagobbler.addFeatureToData(_args);

            }//end _features
            //datagobbler.data.by_layer_name[layer]
           // _objects[k].featuresFiltered =
            datagobbler.addObjectToData(_objects[k]);
            //console.log("_objects[k]",_objects[k]);
            //console.log(_temp_features);

        }//end _objects
        //console.log(datagobbler.data_layers[layer].api_info.objects);//_objects);
        datagobbler.filterSuccess(layer);
        datagobbler.numOfDataFilesFiltered++;
        return _objects;
    }

    datagobbler.checkForDataLayerDateInRangeObject = function(args){

        var _yyyy = args.itime.year;
        var _mm = args.itime.month;
        var _dd = args.itime.day;
        var _numbertime = args.itime.numbertime;

        if(!datagobbler.data.by_date.inside_range[_yyyy]){
            datagobbler.data.by_date.inside_range[_yyyy] = {};
        }
        if(!datagobbler.data.by_date.inside_range[_yyyy][_mm]){
            datagobbler.data.by_date.inside_range[_yyyy][_mm] = {};
        }
        if(!datagobbler.data.by_date.inside_range[_yyyy][_mm][_dd]){
            datagobbler.data.by_date.inside_range[_yyyy][_mm][_dd] = [];
            datagobbler.data.all_dates.byArray.inside_range[_numbertime] = args.itime;
            datagobbler.data.all_dates.byObject.inside_range[_numbertime] = args.itime;
        }

        if(!datagobbler.data.by_layer_name[args.layer].by_date.inside_range[_yyyy]){
            datagobbler.data.by_layer_name[args.layer].by_date.inside_range[_yyyy] = {};
        }
        if(!datagobbler.data.by_layer_name[args.layer].by_date.inside_range[_yyyy][_mm]){
            datagobbler.data.by_layer_name[args.layer].by_date.inside_range[_yyyy][_mm] = {};
        }
        if(!datagobbler.data.by_layer_name[args.layer].by_date.inside_range[_yyyy][_mm][_dd]){
            datagobbler.data.by_layer_name[args.layer].by_date.inside_range[_yyyy][_mm][_dd] = [];
            datagobbler.data.by_layer_name[args.layer].all_dates.byArray.inside_range[_numbertime] = args.itime;
            datagobbler.data.by_layer_name[args.layer].all_dates.byObject.inside_range[_numbertime] = args.itime;
        }

    }

    datagobbler.checkForDataLayerDateOutsideRangeObject = function(args){

        var _yyyy = args.itime.year;
        var _mm = args.itime.month;
        var _dd = args.itime.day;
        var _numbertime = args.itime.numbertime;

        if(!datagobbler.data.by_date.outside_range[_yyyy]){
            datagobbler.data.by_date.outside_range[_yyyy] = {};
        }
        if(!datagobbler.data.by_date.outside_range[_yyyy][_mm]){
            datagobbler.data.by_date.outside_range[_yyyy][_mm] = {};
        }
        if(!datagobbler.data.by_date.outside_range[_yyyy][_mm][_dd]){
            datagobbler.data.by_date.outside_range[_yyyy][_mm][_dd] = [];
            datagobbler.data.all_dates.byArray.outside_range[_numbertime] = args.itime;
            datagobbler.data.all_dates.byObject.outside_range[_numbertime] = args.itime;
        }

        if(!datagobbler.data.by_layer_name[args.layer].by_date.outside_range[_yyyy]){
            datagobbler.data.by_layer_name[args.layer].by_date.outside_range[_yyyy] = {};
        }
        if(!datagobbler.data.by_layer_name[args.layer].by_date.outside_range[_yyyy][_mm]){
            datagobbler.data.by_layer_name[args.layer].by_date.outside_range[_yyyy][_mm] = {};
        }
        if(!datagobbler.data.by_layer_name[args.layer].by_date.outside_range[_yyyy][_mm][_dd]){
            datagobbler.data.by_layer_name[args.layer].by_date.outside_range[_yyyy][_mm][_dd] = [];
            datagobbler.data.by_layer_name[args.layer].all_dates.byArray.outside_range[_numbertime] = args.itime;
            datagobbler.data.by_layer_name[args.layer].all_dates.byObject.outside_range[_numbertime] = args.itime;
        }

        //['all_dates'] = { byArray:{inside_range:[],outside_range:[]}, byObject:{inside_range:{},outside_range:{}} };

    }

    datagobbler.getCommonTime = function(args) {

        var _time = moment(args.time,args.format); //147377631516
        //console.log(time,format,_time);
        //var _time_utc = moment(moment(time).utc().format()).utc();
        // Use MomentJS to create a more feature-rich date object that can read multuiple date/time formats automatically
        // This reduces the amount of custom parsing we need to perform for various dates

        var _yyyy = String(_time.year());
        var _mm = String(_time.get('month')+1);
        var _dd = String(_time.get('date'));
        var _isInGlobalDateRange = true;
        var _numbertime = (Number(_yyyy+getDouble(_mm)+getDouble(_dd)));

        function getDouble(num){ //returns a number like 6 or 7 as "06" or "07"
            num = Number(num);
            return num > 9 ? "" + num: "0" + num;
        }
        if(datagobbler.data_options.de<Caution-datagobbler.data_options.de>fault_dates.idate_start && datagobbler.data_options.default_dates.idate_end){
            _isInGlobalDateRange = datagobbler.dateIsInGlobalDateRange(_time);
        }

        /*
        Create an object to pass basic year/month/day info to any script calling this function
        */
        var _timeObj = {
            //'time':_time,
            //'time_utc':_time_utc,
            'year':_yyyy,
            'month':_mm,
            'day':_dd,
            'date':_time,
            'prettytime':(_mm+"/"+_dd+"/"+_yyyy),
            'numbertime':_numbertime,
            'isInGlobalDateRange':_isInGlobalDateRange
        }

        return _timeObj;
    }

    datagobbler.dateIsInGlobalDateRange = function(date) {
        var _rsd = datagobbler.data_options.default_dates.idate_start.date;
        var _red = datagobbler.data_options.default_dates.idate_end.date;
        var _isInRange = false;
        //console.log(_rsd <= date && date <=_red);
        if(_rsd <= date && date <=_red){
            _isInRange = true;
        }
        return _isInRange;
    }


    datagobbler.getFilter = function(args){
        //Check if we are passing a number as text
        //If so, change it to a number
        var _type = Number(args.val2);
        //console.log(_type,isNaN(_type));
        if(!isNaN(_type)){
            args.val1 = Number(args.val1);
            args.val2 = Number(args.val2);
        }
        //console.log(args);
        switch(args.operator) {
            case "!=":
                return args.val1 != args.val2;
            case "=="||"=":
                return args.val1 == args.val2;
            case "+":
                return args.val1 + args.val2;
            case "-":
                return args.val1 - args.val2;
            case "*":
                return args.val1 * args.val2;
            case "/":
                return args.val1 / args.val2;
            case "<":
                return args.val1 < args.val2;
            case ">":
                return args.val1 > args.val2;
            case "<=":
                return args.val1 <= args.val2;
            case ">=":
                return args.val1 >= args.val2;
            case "LIKE"||"like"||"IS LIKE"||"is like":
                return (String(args.val1).indexOf(String(args.val2))>=0);
            case "NOT LIKE"||"not like"||"!LIKE"||"!like":
                return (String(args.val1).indexOf(String(args.val2))<0);
        }
    }

    datagobbler.addPropertyObjects = function(feature){

    }

    datagobbler.addFeatureToData = function(args) {
        var layer = args.layer;
        var feature = args.feature;
        var keepFeature = args.keepFeature;
        var _isTemporal = args.is_temporal;
        var _hasGroupByObjects = datagobbler.data_layers[layer].api_info.group_by.length;

        if(keepFeature){
            if(_hasGroupByObjects>0){ //if we defined or requested byProperty objects in config.json
                //console.log("has property objects!",_hasPropertyObjects);
                for(p in datagobbler.data_layers[layer].api_info.group_by){
                    var _prop = datagobbler.data_layers[layer].api_info.group_by[p];


                    if(!datagobbler.data.by_layer_name[layer].by_group[_prop]){
                        datagobbler.data.by_layer_name[layer].by_group[_prop] = {};
                    }
                    if(datagobbler.data.by_layer_name[layer].by_group[_prop]){
                        var _val = feature.properties[_prop];
                        if(!datagobbler.data.by_layer_name[layer].by_group[_prop][_val]){
                            datagobbler.data.by_layer_name[layer].by_group[_prop][_val] = [];
                            //console.log(_val);
                        }
                        if(datagobbler.data.by_layer_name[layer].by_group[_prop][_val]){
                           datagobbler.data.by_layer_name[layer].by_group[_prop][_val].push(feature);
                        }
                    }
                }
            }
            if(args.has_geospatial_data){
                datagobbler.data.all_data.geospatial.push(feature);
                datagobbler.data.by_layer_name[layer].all_data.geospatial.push(feature);
            }else{
                datagobbler.data.all_data.regular.push(feature);
                datagobbler.data.by_layer_name[layer].all_data.regular.push(feature);
            }
        }

        if(_isTemporal){

            var _inRange = feature.properties.itime.isInGlobalDateRange;

            // Add the object to the array corresponding to the year->month->day that the UI object represents
            if(_inRange){
                datagobbler.checkForDataLayerDateInRangeObject({layer:layer,itime:feature.properties.itime});
                datagobbler.data.by_date.inside_range[feature.properties.itime.year][feature.properties.itime.month][feature.properties.itime.day].push(feature);
                datagobbler.data.by_layer_name[layer].by_date.inside_range[feature.properties.itime.year][feature.properties.itime.month][feature.properties.itime.day].push(feature);
            }else{
                datagobbler.checkForDataLayerDateOutsideRangeObject({layer:layer,itime:feature.properties.itime});
                datagobbler.data.by_date.outside_range[feature.properties.itime.year][feature.properties.itime.month][feature.properties.itime.day].push(feature);
                datagobbler.data.by_layer_name[layer].by_date.outside_range[feature.properties.itime.year][feature.properties.itime.month][feature.properties.itime.day].push(feature);
            }

        }

    }

    datagobbler.addObjectToData = function(obj) {
        datagobbler.data.all_data.objects.push(obj);
        datagobbler.data.by_layer_name[obj.data_layer].all_data.objects.push(obj);
    }

}();


===========================================================


!function() {
    lastmap = {
        name:"LastMap",
        version:"0.1",
        map:{
            style:{},
            type:"",
            projection:"",
            width:"100%",
            height:"100%",
            x:0,
            y:0
        },
        mapData:{}
    };
    lastmap.version = '0.1';

    lastmap.createMap = function(mapOptions){
        lastmap.mapOptions = mapOptions;
        d3.json(lastmap.mapOptions.styleFileUrl, function(error,styleData) {
            if(error){
                console.log("error loading.")
            }else{
                lastmap.styleData = styleData;
                lastmap.createDataGobblerObject();
            }
        });
    }


    lastmap.dataGobblerLoadingCallbackFunction = function(data){
        lastmap.mapOptions.loadingCallbackFunction(data);
    }
    lastmap.dataGobblerLoadedCallbackFunction = function(data){
        //console.log("lastmap.dataGobblerLoadedCallbackFunction called.");
        //console.log(data);
        lastmap.mapData.raw = data;
        lastmap.mapData.geojson = {"type":"FeatureCollection","features":[]};
        lastmap.mapData.geojsonObjects = {"type":"GeojsonList","objects":{}};
        lastmap.arrangeDataToMatchMapStyleLayers();
        lastmap.mapOptions.loadedCallbackFunction({
            data:data,
            map:lastmap.leafletMap
        });
    }

    lastmap.arrangeDataToMatchMapStyleLayers = function(){
        //console.log(lastmap.styleData.layers,lastmap.mapData);
        //console.log("lastmap.arrangeDataToMatchMapStyleLayers called.");
        lastmap.styleData.stylesByLayerName = {};
        for(l in lastmap.styleData.layers){

            var _style              = lastmap.styleData.layers[l];
            var _styleSource        = _style.source;
            var _styleLayerName     = _style["source-layer"];
            var _styleLayerId       = _style.id<Caution-style.id>;

            lastmap.styleData.stylesByLayerName[_styleLayerId] = _style;

            var _sourceDataObjects = lastmap.mapData.raw.by_layer_name[_styleLayerId].all_data.ge<Caution-all_data.ge>ospatial;

            //var _geojson = {"type":"FeatureCollection"};
            //_geojson.features = _sourceDataObjects;
            //lastmap.mapData.geojsonObjects.objects[_styleLayerId] = _geojson;

            //lastmap.mapData.geojsonArray = [];
            for(v in _sourceDataObjects){
                //_sourceDataObjects[v].styleId = _styleLayerId;
                //lastmap.mydata = datagobbler.data_layers[_styleLayerId].api_info.data;
                _sourceDataObjects[v].properties.styleId = _styleLayerId;
            }

            lastmap.mapData.geojson.features.push.apply(lastmap.mapData.geojson.features, _sourceDataObjects);

            //var _tempArr = _sourceDataObjects.filter(arrayFilter);
            //console.log(_styleLayerId,_sourceDataObjects);
        }

        //console.log(lastmap.mapData.geojsonObjects);

        //lastmap.mapData.topojson = topojson.topology(lastmap.mapData.geojsonObjects);
        console.log(lastmap.mapData);//lastmap.mapData.topojson);



        console.log("L.Proj",L.Proj);

        var crs4326 = new L.Proj.CRS('EPSG:4326',
"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
[-180.00, -90, 180.0, 90], /*minx,miny,maxx,maxy*/
                {resolutions: [
                0.7031250000000000000000000,
                0.3515625000000000000000000,
                0.1757812500000000000000000,
                0.0878906250000000000000000,
                0.0439453125000000000000000,
                0.0219726562500000000000000,
                0.0109863281250000000000000,
                0.0054931640625000000000000,
                0.0027465820312500000000000,
                0.0013732910156250000000000,
                0.0006866455078125000000000,
                0.0003433227539062500000000,
                0.0001716613769531250000000,
                0.0000858306884765625000000,
                0.0000429153442382812500000
                       ],
                 noWrap:true
                });

        /*

//console.log(this.mapOptions);
this.leafletMap = new L.Map(this.mapOptions.mapDivId, {
minZoom:this.mapOptions.minZoom,
maxZoom:this.mapOptions.maxZoom,
                //crs: L.CRS.EPSG4326,
                crs: crs4326,//L.CRS.EPSG4326,
                continuousWorld: false,
//maxBounds: mapBounds,
zoomControl: true

                var map = new L.Map('map', {
            crs: crs,
            continuousWorld: true,
            worldCopyJump: false
        });

        var tileUrl = 'Tiles/{z}/{x}/{y}.png',
            tilelayer = new L.Proj.TileLayer.TMS(tileUrl, crs, {
                maxZoom: 8
                , minZoom: 0
                , continuousWorld: true
            });

        */
        //var _layer = L.vectorGrid.slicer(lastmap.ma<Caution-lastmap.ma>pData.geojson, lastmap.mapData.tileOptions);

        lastmap.leafletMap = new L.Map("map", {
                crs:L.CRS.EPSG4326,
                continuousWorld: false,
                noWrap: true,
                worldCopyJump: false,
minZoom:0,
maxZoom:14,
zoomControl: true
}).setView([38,-78],5);

        //console.log(geojsonvt);
         lastmap.mapData.tileOptions = {
maxZoom:14,  // max zoom to preserve detail on
tolerance:10, // simplification tolerance (higher means simpler)
extent: 4096, // tile extent (both width and height)
buffer: 64,   // tile buffer on each side
debug: 0,      // logging level (0 to disable, 1 or 2)
indexMaxZoom:10,        // max zoom in the initial tile index
indexMaxPoints:1000, // max number of points per tile in the index
        };

        lastmap.mapData.vectorTiles = geojsonvt(lastmap.mapData.geojson, lastmap.mapData.tileOptions);
        //console.log(lastmap.mapData.vectorTiles);


        L.GridLayer.LastmapTiles = L.GridLayer.extend({
            createTile: function (coords) {
                var tile = document.createElement('canvas');
                var data = lastmap.mapData.vectorTiles.ge<Caution-lastmap.mapData.vectorTiles.ge>tTile(coords.z, coords.x, coords.y);

                if(data){

                    //console.log(data);
                    var tileSize = this.getTileSize();
                    var ratio = 1;

                    //console.log(tileSize);
                    tile.setAttribute('width', tileSize.x);
                    tile.setAttribute('height', tileSize.y);

                    var ctx = tile.getContext('2d');

                    /*

                    */


                    ctx.globalCompositeOperation = 'source-over';

                    //ctx.arc(tileSize.x/2, tileSize.x/2, 4 + coords.z*4, 0, 2*Math.PI, false);
                    //ctx.fill();
                     ctx.clearRect(0, 0, tileSize.x, tileSize.y);
        ctx.strokeStyle = 'grey';
        var ratio = 1;

                    for (var i = 0; i < data.features.length; i++) {

       var feature = data.features[i];
                        var layerId   = feature.tags.styleId;
                        var layerStyle = lastmap.styleData.stylesByLayerName[layerId];
                        var shape = layerStyle.type;
                        var ctxStyles = {};
                        var type = feature.type;


                        switch(shape) {
                            case "fill":
                                for(s in layerStyle.paint){
                                    //console.log(s);
                                    var key, val;
                                    var str = layerStyle.paint[s];
                                    if(str.indexOf('@')>=0){
                                        val = lastmap.styleData.constants[str];
                                    }else{
                                        val = str;
                                    }

                                    switch(s) {
                                        case "fill-antialias":
                                            //sometings...
                                            break;
                                        case "visibility":
                                            //something
                                            break;
                                        case "fill-opacity":
                                            //
                                            break;
                                        case "fill-color":
                                            ctx.fillStyle = val;
                                            break;
                                    }
                                }
                                //return args.val1 != args.val2;
                            case "line":
                                for(s in layerStyle.paint){
                                    //console.log(s);
                                }
                                //return args.val1 == args.val2;
                        }
                        //console.log(ctx);

                        //ctx.fillStyle = 'rgba(25,25,25,0.5)';
       //ctx.strokeStyle = 'rgba(25,25,25,0.5)';
       //ctx.lineWidth = 1;
       ctx.beginPath();

                        if(layerStyle.minzoom<=coords.z && layerStyle.maxzoom>=coords.z){
                            //console.log("SHOW");
                            for (var j = 0; j < feature.geometry.length; j++) {
                                var pad = 0;
                                var geom = feature.geometry[j];

                                for (var k = 0; k < geom.length; k++) {
                                    var p = geom[k];
                                    var extent = 4096;
                                    var x = p[0] / extent * 256;
                                    var y = p[1] / extent * 256;
                                    if (k) ctx.lineTo(x  + pad, y   + pad);
                                    else ctx.moveTo(x  + pad, y  + pad);
                                }

                            }
                            if (type === 3 || type === 1) ctx.fill('evenodd');
      ctx.stroke();
                            //ctx.fill();
                            //ctx.beginPath();
                        }
                    }
                    //var tile = document.createElement('div');
                    //tile.innerHTML = [coords.x, coords.y, coords.z].join(', ');
                    //var tile = params.options.tileIndex1.getTile(params.tilePoint.z, params.tilePoint.x, params.tilePoint.y);
                    //var _tile = lastmap.mapData.vectorTiles.ge<Caution-lastmap.mapData.vectorTiles.ge>tTile(coords.z, coords.x, coords.y);
                    //lastmap.mapData.vectorTiles
                    //console.log(_tile);
                    //tile.style.outline = '1px solid red';
                    //tile.style.color = "green";

                }
                return tile;
            }
        });

        var opts = {noWrap:true};

        L.gridLayer.LastmapTiles = function(opts) {
            var gLayer = new L.GridLayer.LastmapTiles(opts);
            console.log("gLayer",gLayer,"opts",opts);
            //gLayer._wrapX[1] = 2;
            return gLayer;
        };

        lastmap.leafletMap.addLayer( L.gridLayer.LastmapTiles(opts) );

        /*
        var _vt = L.vectorGrid.slicer(lastmap.ma<Caution-lastmap.ma>pData.geojsonObjects, {
            rendererFactory: L.canvas.tile,
            attribution: 'Something',
            vectorTileLayerName:"veclayer",
            vectorTileLayerStyles: {
               "layer-states": {
                    weight: 0,
                    fillColor: 'rgba(255,0,0,0.5)',
                    fillOpacity: 1,
                    fill: true
                },
                "layer-countries": {
                    weight: 0,
                    fillColor: 'rgba(0,255,0,0.5)',
                    fillOpacity: 1,
                    fill: true
                }
            }
        }).addTo(lastmap.leafletMap);
        */
        //console.log(topojson);//lastmap.mydata,_vt);
        //console.log(lastmap);
    }

    lastmap.callDataGobbler = function(){
        datagobbler.ondataLoaded = lastmap.dataGobblerLoadedCallbackFunction;
        datagobbler.ondataLoading = lastmap.dataGobblerLoadingCallbackFunction;
        datagobbler.data_layers = lastmap.dataGobblerObject.data_layers;
        datagobbler.data_options = lastmap.dataGobblerObject.data_options;
        datagobbler.data_options.dates = datagobbler.setDefaultDates(lastmap.dataGobblerObject.data_options.default_dates);
        datagobbler.setDataOptions();
    }

    lastmap.createDataGobblerObject = function(){

        var _dataLayers = {};
        for(l in lastmap.styleData.layers){

            //console.log("style",lastmap.styleData.sources[s]);
            var _id             = lastmap.styleData.layers[l].id;
            var _source         = lastmap.styleData.layers[l].source;
            var _sourceLayer    = lastmap.styleData.layers[l]['source-layer'];
            var _url            = lastmap.styleData.sources[_source].url;
            var _type           = lastmap.styleData.sources[_source].type;
            var _filterOut      = lastmap.styleData.layers[l].metadata['filter-out'];
            var _groupBy        = lastmap.styleData.layers[l].metadata['group-by'];

            //console.log(l,_id,_source,_sourceLayer,_url,_type,_filterOut,_groupBy);
            ///*
            _dataLayers[_id] = {
                "title":_sourceLayer,
                "api_info": {
                    "url":_url,
                    "url_date_format":null,
                    "file_type":_type,
                    "filter_out":_filterOut,
                    "group_by":_groupBy,
                    //"single_layer_only" is used only between lastmap and datagobbler to
                    // deal with mapbox style layers
                    "single_layer_only":true,
                    "proxy_url":null,
                    "date_info": {
                        "date_field":null,
                        "date_format":null,
                        "offset_type":"days",
                        "date_start_offset":0,
                        "date_end_offset":0
                    },
                    "if_not_geospatial_file_type":{
                        "field_to_use_for_latitude":null,
                        "field_to_use_for_longitude":null
                    }
                }
            }
           // */
        }

       // /*
        lastmap.dataGobblerObject = {
            "data_layers":_dataLayers,
            "data_options": {
                "default_proxy_url":null,
                "default_dates": {
                    "date_format":"MM/DD/YYYY",
                    "date_start":"01/01/1000",
                    "date_end":"01/01/3000"
                },
                "dataBounds": {
                    "north":90,
                    "south":-90,
                    "east":180,
                    "west":-180
                }
            }
        }

        lastmap.callDataGobbler();
        //*/
    }
    /*

    {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [0, 0]
          },
          "properties": {
            "name": "null island"
          }
        }
      ]
    }


   datagobbler.getData = function(_url,_cb){
        d3.json(_url, function(error,data) {
            if(error){
                //console.log(error,"JSON error");
            }else{
                datagobbler.ondataLoaded = _cb;
                //console.log(data);
                //_cb(data);
                datagobbler.dataLayers = data.dataLayers;
                datagobbler.setDataOptions(data.dataOptions);
            }
        });
    }

    var map = L.map('map', {
        crs: L.CRS.EPSG4326
        });

    this.leafletMap = new L.Map(this.mapOptions.mapDivId, {
minZoom:this.mapOptions.minZoom,
maxZoom:this.mapOptions.maxZoom,
maxBounds: mapBounds,
zoomControl: true
}).setView([this.mapOptions.centerLat,this.mapOptions.centerLon],this.mapOptions.defaultZoom);
this.leafletMap.on('moveend', function() {
lastmap.insetmap.recenter();
lastmap.redrawCityLabels();
lastmap.redrawCountryLabels();
});
    */

}();


==========================================================


'use strict';



function geojsonvt(data, options) {
    return new GeoJSONVT(data, options);
}

function GeoJSONVT(data, options) {
    options = this.options = extend(Object.create(this.options), options);

    var debug = options.debug;

    if (debug) console.time('preprocess data');

    var z2 = 1 << options.maxZoom, // 2^z
        features = convert(data, options.tolerance / (z2 * options.extent));

    this.tiles = {};
    this.tileCoords = [];

    if (debug) {
        console.timeEnd('preprocess data');
        console.log('index: maxZoom: %d, maxPoints: %d', options.indexMaxZoom, options.indexMaxPoints);
        console.time('generate tiles');
        this.stats = {};
        this.total = 0;
    }

    features = wrap(features, options.buffer / options.extent, intersectX);

    // start slicing from the top tile down
    if (features.length) this.splitTile(features, 0, 0, 0);

    if (debug) {
        if (features.length) console.log('features: %d, points: %d', this.tiles[0].numFeatures, this.tiles[0].numPoints);
        console.timeEnd('generate tiles');
        console.log('tiles generated:', this.total, JSON.stringify(this.stats));
    }
}

GeoJSONVT.prototype.options = {
    maxZoom: 14,            // max zoom to preserve detail on
    indexMaxZoom: 5,        // max zoom in the tile index
    indexMaxPoints: 100000, // max number of points per tile in the tile index
    solidChildren: false,   // whether to tile solid square tiles further
    tolerance: 3,           // simplification tolerance (higher means simpler)
    extent: 4096,           // tile extent
    buffer: 64,             // tile buffer on each side
    debug: 0                // logging level (0, 1 or 2)
};

GeoJSONVT.prototype.splitTile = function (features, z, x, y, cz, cx, cy) {
    //console.log(">> splitTile");
    //if(z<=1) console.log("splitTile.features",features,"x",x,"y",y);

    var stack = [features, z, x, y],
        options = this.options,
        debug = options.debug,
        solid = null;
    console.log("stack",stack,"options",options,"stack.length",stack.length);
    // avoid recursion by using a processing queue
    while (stack.length) {
        y = stack.pop();
        x = stack.pop();
        z = stack.pop();
        features = stack.pop();
        if(z<=1) console.log("z",z,"x",x,"y",y);
        var z2 = 1 << z,
            id = toID(z, x, y),
            tile = this.tiles[id],
            tileTolerance = z === options.maxZoom ? 0 : options.tolerance / (z2 * options.extent);

        if (!tile) {
            if (debug > 1) console.time('creation');

            tile = this.tiles[id] = createTile(features, z2, x, y, tileTolerance, z === options.maxZoom);
            this.tileCoords.push({z: z, x: x, y: y});

            if (debug) {
                if (debug > 1) {
                    console.log('tile z%d-%d-%d (features: %d, points: %d, simplified: %d)',
                        z, x, y, tile.numFeatures, tile.numPoints, tile.numSimplified);
                    console.timeEnd('creation');
                }
                var key = 'z' + z;
                this.stats[key] = (this.stats[key] || 0) + 1;
                this.total++;
            }
        }

        // save reference to original geometry in tile so that we can drill down later if we stop now
        tile.source = features;

        // if it's the first-pass tiling
        if (!cz) {
            // stop tiling if we reached max zoom, or if the tile is too simple
            if (z === options.indexMaxZoom || tile.numPoints <= options.indexMaxPoints) continue;

        // if a drilldown to a specific tile
        } else {
            // stop tiling if we reached base zoom or our target tile zoom
            if (z === options.maxZoom || z === cz) continue;

            // stop tiling if it's not an ancestor of the target tile
            var m = 1 << (cz - z);
            if (x !== Math.floor(cx / m) || y !== Math.floor(cy / m)) continue;
        }

        // stop tiling if the tile is solid clipped square
        if (!options.solidChildren && isClippedSquare(tile, options.extent, options.buffer)) {
            if (cz) solid = z; // and remember the zoom if we're drilling down
            continue;
        }

        // if we slice further down, no need to keep source geometry
        tile.source = null;

        if (debug > 1) console.time('clipping');

        // values we'll use for clipping
        var k1 = 0.5 * options.buffer / options.extent,
            k2 = 0.5 - k1,
            k3 = 0.5 + k1,
            k4 = 1 + k1,
            tl, bl, tr, br, left, right;

        tl = bl = tr = br = null;

        left  = clip(features, z2, x - k1, x + k3, 0, intersectX, tile.min[0], tile.max[0]);
        right = clip(features, z2, x + k2, x + k4, 0, intersectX, tile.min[0], tile.max[0]);

        if (left) {
            tl = clip(left, z2, y - k1, y + k3, 1, intersectY, tile.min[1], tile.max[1]);
            bl = clip(left, z2, y + k2, y + k4, 1, intersectY, tile.min[1], tile.max[1]);
        }

        if (right) {
            tr = clip(right, z2, y - k1, y + k3, 1, intersectY, tile.min[1], tile.max[1]);
            br = clip(right, z2, y + k2, y + k4, 1, intersectY, tile.min[1], tile.max[1]);
        }

        if (debug > 1) console.timeEnd('clipping');

        if (tl) stack.push(tl, z + 1, x * 2,     y * 2);
        if (bl) stack.push(bl, z + 1, x * 2,     y * 2 + 1);
        if (tr) stack.push(tr, z + 1, x * 2 + 1, y * 2);
        if (br) stack.push(br, z + 1, x * 2 + 1, y * 2 + 1);
    }

    return solid;
};

GeoJSONVT.prototype.getTile = function (z, x, y) {
    var options = this.options,
        extent = options.extent,
        debug = options.debug;

    var z2 = 1 << z;
    x = ((x % z2) + z2) % z2; // wrap tile x coordinate

    var id = toID(z, x, y);
    if (this.tiles[id]) return transformTile(this.tiles[id], extent);

    if (debug > 1) console.log('drilling down to z%d-%d-%d', z, x, y);

    var z0 = z,
        x0 = x,
        y0 = y,
        parent;

    while (!parent && z0 > 0) {
        z0--;
        x0 = Math.floor(x0 / 2);
        y0 = Math.floor(y0 / 2);
        parent = this.tiles[toID(z0, x0, y0)];
    }

    if (!parent || !parent.source) return null;

    // if we found a parent tile containing the original geometry, we can drill down from it
    if (debug > 1) console.log('found parent tile z%d-%d-%d', z0, x0, y0);

    // it parent tile is a solid clipped square, return it instead since it's identical
    if (isClippedSquare(parent, extent, options.buffer)) return transformTile(parent, extent);

    if (debug > 1) console.time('drilling down');
    var solid = this.splitTile(parent.source, z0, x0, y0, z, x, y);
    if (debug > 1) console.timeEnd('drilling down');

    // one of the parent tiles was a solid clipped square
    if (solid !== null) {
        var m = 1 << (z - solid);
        id = toID(solid, Math.floor(x / m), Math.floor(y / m));
    }

    return this.tiles[id] ? transformTile(this.tiles[id], extent) : null;

    /*
    if (!this.tiles[id]) return null;

    return transformTile(this.tiles[id], extent);
    */
};

function toID(z, x, y) {
    return (((1 << z) * y + x) * 32) + z;
}

function intersectX(a, b, x) {
    //console.log("a",a,"b",b,"x",x);
    return [x, (x - a[0]) * (b[1] - a[1]) / (b[0] - a[0]) + a[1], 1];
}
function intersectY(a, b, y) {
    return [(y - a[1]) * (b[0] - a[0]) / (b[1] - a[1]) + a[0], y, 1];
}

function extend(dest, src) {
    for (var i in src) dest[i] = src[i];
    return dest;
}

// checks whether a tile is a whole-area fill after clipping; if it is, there's no sense slicing it further
function isClippedSquare(tile, extent, buffer) {

    var features = tile.source;
    if (features.length !== 1) return false;

    var feature = features[0];
    if (feature.type !== 3 || feature.geometry.length > 1) return false;

    var len = feature.geometry[0].length;
    if (len !== 5) return false;

    for (var i = 0; i < len; i++) {
        var p = transformPoint(feature.geometry[0][i], extent, tile.z2, tile.x, tile.y);
        if ((p[0] !== -buffer && p[0] !== extent + buffer) ||
            (p[1] !== -buffer && p[1] !== extent + buffer)) return false;
    }

    return true;
}

// converts GeoJSON feature into an intermediate projected JSON vector format with simplification data

function convert(data, tolerance) {
    var features = [];

    if (data.type === 'FeatureCollection') {
        for (var i = 0; i < data.features.length; i++) {
            convertFeature(features, data.features[i], tolerance);
        }
    } else if (data.type === 'Feature') {
        convertFeature(features, data, tolerance);

    } else {
        // single geometry or a geometry collection
        convertFeature(features, {geometry: data}, tolerance);
    }
    return features;
}

function convertFeature(features, feature, tolerance) {
    var geom = feature.geometry,
        type = geom.type,
        coords = geom.coordinates,
        tags = feature.properties,
        i, j, rings;
    if (type === 'Point') {
        features.push(create(tags, 1, [projectPoint(coords)]));

    } else if (type === 'MultiPoint') {
        features.push(create(tags, 1, project(coords)));

    } else if (type === 'LineString') {
        features.push(create(tags, 2, [project(coords, tolerance)]));

    } else if (type === 'MultiLineString' || type === 'Polygon') {
        rings = [];
        for (i = 0; i < coords.length; i++) {
            rings.push(project(coords[i], tolerance));
        }
        features.push(create(tags, type === 'Polygon' ? 3 : 2, rings));

    } else if (type === 'MultiPolygon') {
        rings = [];
        for (i = 0; i < coords.length; i++) {
            for (j = 0; j < coords[i].length; j++) {
                rings.push(project(coords[i][j], tolerance));
            }
        }
        features.push(create(tags, 3, rings));

    } else if (type === 'GeometryCollection') {
        for (i = 0; i < geom.geometries.length; i++) {
            convertFeature(features, {
                geometry: geom.geometries[i],
                properties: tags
            }, tolerance);
        }

    } else {
        throw new Error('Input data is not a valid GeoJSON object.');
    }
}

function create(tags, type, geometry) {
    var feature = {
        geometry: geometry,
        type: type,
        tags: tags || null,
        min: [2, 1], // initial bbox values;
        max: [-1, 0]  // note that coords are usually in [0..1] range
    };
    calcBBox(feature);
    return feature;
}

function project(lonlats, tolerance) {
    var projected = [];
    for (var i = 0; i < lonlats.length; i++) {
        projected.push(projectPoint(lonlats[i]));
    }
    if (tolerance) {
        simplify(projected, tolerance);
        calcSize(projected);
    }
    return projected;
}

function projectPoint(p) {
    var sin = Math.sin(p[1] * Math.PI / 180);
        //x = (p[0] / 360 + 0.5),
        //y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);
    var x = (p[0] / 180) + 1;
    var y = -(p[1] / 180) + 0.5;
    //y = y < -1 ? -1 :
    //y > 1 ? 1 : y;
    y = y < 0 ? 0 :
    y > 1 ? 1 : y;

    return [x, y, 0];
}

function projectPoint3857(p) {
    var sin = Math.sin(p[1] * Math.PI / 180),
        x = (p[0] / 360 + 0.5),
        y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);

    y = y < 0 ? 0 :
        y > 1 ? 1 : y;

    return [x, y, 0];
}

// calculate area and length of the poly
function calcSize(points) {
    var area = 0,
        dist = 0;

    for (var i = 0, a, b; i < points.length - 1; i++) {
        a = b || points[i];
        b = points[i + 1];

        area += a[0] * b[1] - b[0] * a[1];

        // use Manhattan distance instead of Euclidian one to avoid expensive square root computation
        dist += Math.abs(b[0] - a[0]) + Math.abs(b[1] - a[1]);
    }
    points.area = Math.abs(area / 2);
    points.dist = dist;
}

// calculate the feature bounding box for faster clipping later
function calcBBox(feature) {
    var geometry = feature.geometry,
        min = feature.min,
        max = feature.max;

    if (feature.type === 1) calcRingBBox(min, max, geometry);
    else for (var i = 0; i < geometry.length; i++) calcRingBBox(min, max, geometry[i]);

    return feature;
}

function calcRingBBox(min, max, points) {
    for (var i = 0, p; i < points.length; i++) {
        p = points[i];
        min[0] = Math.min(p[0], min[0]);
        max[0] = Math.max(p[0], max[0]);
        min[1] = Math.min(p[1], min[1]);
        max[1] = Math.max(p[1], max[1]);
    }
}

// calculate simplification data using optimized Douglas-Peucker algorithm

function simplify(points, tolerance) {

    var sqTolerance = tolerance * tolerance,
        len = points.length,
        first = 0,
        last = len - 1,
        stack = [],
        i, maxSqDist, sqDist, index;

    // always retain the endpoints (1 is the max value)
    points[first][2] = 1;
    points[last][2] = 1;

    // avoid recursion by using a stack
    while (last) {

        maxSqDist = 0;

        for (i = first + 1; i < last; i++) {
            sqDist = getSqSegDist(points[i], points[first], points[last]);

            if (sqDist > maxSqDist) {
                index = i;
                maxSqDist = sqDist;
            }
        }

        if (maxSqDist > sqTolerance) {
            points[index][2] = maxSqDist; // save the point importance in squared pixels as a z coordinate
            stack.push(first);
            stack.push(index);
            first = index;

        } else {
            last = stack.pop();
            first = stack.pop();
        }
    }
}

// square distance from a point to a segment
function getSqSegDist(p, a, b) {

    var x = a[0], y = a[1],
        bx = b[0], by = b[1],
        px = p[0], py = p[1],
        dx = bx - x,
        dy = by - y;

    if (dx !== 0 || dy !== 0) {

        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);

        if (t > 1) {
            x = bx;
            y = by;

        } else if (t > 0) {
            x += dx * t;
            y += dy * t;
        }
    }

    dx = px - x;
    dy = py - y;

    return dx * dx + dy * dy;
}

function wrap(features, buffer, intersectX) { //TODO - work on clipping features to equirectangular properly
    //console.log("buffer",buffer,"intersectX",intersectX);
    var merged = features,
        left  = clip(features, 1, -1 - buffer, buffer,     0, intersectX, -1, 2), // left world copy
        right = clip(features, 1,  1 - buffer, 2 + buffer, 0, intersectX, -1, 2); // right world copy

    if (left || right) {
        merged = clip(features, 1, -buffer, 1 + buffer, 0, intersectX, -1, 2); // center world copy

        if (left) merged = shiftFeatureCoords(left, 1).concat(merged); // merge left into center
        if (right) merged = merged.concat(shiftFeatureCoords(right, -1)); // merge right into center
    }

    return merged;
}

function shiftFeatureCoords(features, offset) {
    var newFeatures = [];

    for (var i = 0; i < features.length; i++) {
        var feature = features[i],
            type = feature.type;

        var newGeometry;

        if (type === 1) {
            newGeometry = shiftCoords(feature.geometry, offset);
        } else {
            newGeometry = [];
            for (var j = 0; j < feature.geometry.length; j++) {
                newGeometry.push(shiftCoords(feature.geometry[j], offset));
            }
        }

        newFeatures.push({
            geometry: newGeometry,
            type: type,
            tags: feature.tags,
            min: [feature.min[0] + offset, feature.min[1]],
            max: [feature.max[0] + offset, feature.max[1]]
        });
    }

    return newFeatures;
}

function shiftCoords(points, offset) {
    var newPoints = [];
    newPoints.area = points.area;
    newPoints.dist = points.dist;

    for (var i = 0; i < points.length; i++) {
        newPoints.push([points[i][0] + offset, points[i][1], points[i][2]]);
    }
    return newPoints;
}

/* clip features between two axis-parallel lines:
 *     |        |
 *  ___|___     |     /
 * /   |   \____|____/
 *     |        |
 */

function clip(features, scale, k1, k2, axis, intersect, minAll, maxAll) {

    k1 /= scale;
    k2 /= scale;

    if (minAll >= k1 && maxAll <= k2) return features; // trivial accept
    else if (minAll > k2 || maxAll < k1) return null; // trivial reject

    var clipped = [];

    for (var i = 0; i < features.length; i++) {

        var feature = features[i],
            geometry = feature.geometry,
            type = feature.type,
            min, max;

        min = feature.min[axis];
        max = feature.max[axis];

        if (min >= k1 && max <= k2) { // trivial accept
            clipped.push(feature);
            continue;
        } else if (min > k2 || max < k1) continue; // trivial reject

        var slices = type === 1 ?
                clipPoints(geometry, k1, k2, axis) :
                clipGeometry(geometry, k1, k2, axis, intersect, type === 3);

        if (slices.length) {
            // if a feature got clipped, it will likely get clipped on the next zoom level as well,
            // so there's no need to recalculate bboxes
            clipped.push({
                geometry: slices,
                type: type,
                tags: features[i].tags || null,
                min: feature.min,
                max: feature.max
            });
        }
    }

    return clipped.length ? clipped : null;
}

function clipPoints(geometry, k1, k2, axis) {
    var slice = [];

    for (var i = 0; i < geometry.length; i++) {
        var a = geometry[i],
            ak = a[axis];

        if (ak >= k1 && ak <= k2) slice.push(a);
    }
    return slice;
}

function clipGeometry(geometry, k1, k2, axis, intersect, closed) {

    var slices = [];

    for (var i = 0; i < geometry.length; i++) {

        var ak = 0,
            bk = 0,
            b = null,
            points = geometry[i],
            area = points.area,
            dist = points.dist,
            len = points.length,
            a, j, last;

        var slice = [];

        for (j = 0; j < len - 1; j++) {
            a = b || points[j];
            b = points[j + 1];
            ak = bk || a[axis];
            bk = b[axis];

            if (ak < k1) {

                if ((bk > k2)) { // ---|-----|-->
                    slice.push(intersect(a, b, k1), intersect(a, b, k2));
                    if (!closed) slice = newSlice(slices, slice, area, dist);

                } else if (bk >= k1) slice.push(intersect(a, b, k1)); // ---|-->  |

            } else if (ak > k2) {

                if ((bk < k1)) { // <--|-----|---
                    slice.push(intersect(a, b, k2), intersect(a, b, k1));
                    if (!closed) slice = newSlice(slices, slice, area, dist);

                } else if (bk <= k2) slice.push(intersect(a, b, k2)); // |  <--|---

            } else {

                slice.push(a);

                if (bk < k1) { // <--|---  |
                    slice.push(intersect(a, b, k1));
                    if (!closed) slice = newSlice(slices, slice, area, dist);

                } else if (bk > k2) { // |  ---|-->
                    slice.push(intersect(a, b, k2));
                    if (!closed) slice = newSlice(slices, slice, area, dist);
                }
                // | --> |
            }
        }

        // add the last point
        a = points[len - 1];
        ak = a[axis];
        if (ak >= k1 && ak <= k2) slice.push(a);

        // close the polygon if its endpoints are not the same after clipping

        last = slice[slice.length - 1];
        if (closed && last && (slice[0][0] !== last[0] || slice[0][1] !== last[1])) slice.push(slice[0]);

        // add the final slice
        newSlice(slices, slice, area, dist);
    }

    return slices;
}

function newSlice(slices, slice, area, dist) {
    if (slice.length) {
        // we don't recalculate the area/length of the unclipped geometry because the case where it goes
        // below the visibility threshold as a result of clipping is rare, so we avoid doing unnecessary work
        slice.area = area;
        slice.dist = dist;

        slices.push(slice);
    }
    return [];
}

function createTile(features, z2, tx, ty, tolerance, noSimplify) {
    var tile = {
        features: [],
        numPoints: 0,
        numSimplified: 0,
        numFeatures: 0,
        source: null,
        x: tx,
        y: ty,
        z2: z2,
        transformed: false,
        min: [2, 1],
        max: [-1, 0]
    };
    for (var i = 0; i < features.length; i++) {
        tile.numFeatures++;
        addFeature(tile, features[i], tolerance, noSimplify);

        var min = features[i].min,
            max = features[i].max;

        if (min[0] < tile.min[0]) tile.min[0] = min[0];
        if (min[1] < tile.min[1]) tile.min[1] = min[1];
        if (max[0] > tile.max[0]) tile.max[0] = max[0];
        if (max[1] > tile.max[1]) tile.max[1] = max[1];
    }
    return tile;
}

function addFeature(tile, feature, tolerance, noSimplify) {

    var geom = feature.geometry,
        type = feature.type,
        simplified = [],
        sqTolerance = tolerance * tolerance,
        i, j, ring, p;

    if (type === 1) {
        for (i = 0; i < geom.length; i++) {
            simplified.push(geom[i]);
            tile.numPoints++;
            tile.numSimplified++;
        }

    } else {

        // simplify and transform projected coordinates for tile geometry
        for (i = 0; i < geom.length; i++) {
            ring = geom[i];

            // filter out tiny polylines & polygons
            if (!noSimplify && ((type === 2 && ring.dist < tolerance) ||
                                (type === 3 && ring.area < sqTolerance))) {
                tile.numPoints += ring.length;
                continue;
            }

            var simplifiedRing = [];

            for (j = 0; j < ring.length; j++) {
                p = ring[j];
                // keep points with importance > tolerance
                if (noSimplify || p[2] > sqTolerance) {
                    simplifiedRing.push(p);
                    tile.numSimplified++;
                }
                tile.numPoints++;
            }

            simplified.push(simplifiedRing);
        }
    }

    if (simplified.length) {
        tile.features.push({
            geometry: simplified,
            type: type,
            tags: feature.tags || null
        });
    }
}

// Transforms the coordinates of each feature in the given tile from
// mercator-projected space into (extent x extent) tile space.
function transformTile(tile, extent) {
    if (tile.transformed) return tile;

    var z2 = tile.z2,
        tx = tile.x,
        ty = tile.y,
        i, j, k;

    for (i = 0; i < tile.features.length; i++) {
        var feature = tile.features[i],
            geom = feature.geometry,
            type = feature.type;

        if (type === 1) {
            for (j = 0; j < geom.length; j++) geom[j] = transformPoint(geom[j], extent, z2, tx, ty);

        } else {
            for (j = 0; j < geom.length; j++) {
                var ring = geom[j];
                for (k = 0; k < ring.length; k++) ring[k] = transformPoint(ring[k], extent, z2, tx, ty);
            }
        }
    }

    tile.transformed = true;

    return tile;
}

function transformPoint(p, extent, z2, tx, ty) {
    var x = Math.round(extent * (p[0] * z2 - tx)),
        y = Math.round(extent * (p[1] * z2 - ty));
    return [x, y];
}




==============================================================


'use strict';


//Pass in geojson data and options
function geojsonvt(data, options) {
    return new GeoJSONVT(data, options);
}

function GeoJSONVT(data, options) {
    options = this.options = extend(Object.create(this.options), options);

    //Capture debug number from options 0, 1, or 2
    var debug = options.debug;

    // If debug == 1 then...
    if (debug) console.time('preprocess data');

    //Bitwise shifting any number x to the left by y bits yields x * 2^y
    //So if maxZoom is 12, then z2 = 1*2^12 = 4096
    /*
    1*2^0   = 1
    1*2^1   = 2
    1*2^2   = 4
    1*2^3   = 8
    1*2^4   = 16
    etc...
    */
    //maxZoom is 18, then z2 = 1*2^18 = 262144
    //maybe z2 stands for zoomed squared?
    //This figures out the maximum number of tiles that will extend in one direction
    //at the highest zoom level
    var z2 = 1 << options.maxZoom;

    /*
    The tolerance basically determines how specific the geometries need to be calculated
    for the data to draw at increasingly exact precisions at higher zoom levels

    For example, assuming options.tolerance = 3, and options.extent = 4096
    if the map is really basic (maxZoom of 0), then it would look like this:
    tolerance = 3/(1 * 4096)
    Here's a basic quick read assuming 3 and 4096:
    maxZoom 0   = 0.000732421875
    maxZoom 1   = 0.0003662109375
    maxZoom 2   = 0.00018310546875
    maxZoom 3   = 0.000091552734375
    maxZoom 4   = 0.0000457763671875
    maxZoom 5   = 0.00002288818359375
    maxZoom 6   = 0.000011444091796875
    maxZoom 7   = 0.0000057220458984375
    maxZoom 8   = 0.00000286102294921875
    maxZoom 9   = 0.000001430511474609375
    maxZoom 10  = 0.0000007152557373046875
    maxZoom 11  = 0.00000035762786865234375
    maxZoom 12  = 0.000000178813934326171875
    maxZoom 13  = 0.0000000894069671630859375
    maxZoom 14  = 0.00000004470348358154296875
    maxZoom 15  = 0.000000022351741790771484375
    //
    */
    var tolerance = options.tolerance/(z2 * options.extent);

    var features = convert(data, tolerance);
}

GeoJSONVT.prototype.options = {
    maxZoom: 14,            // max zoom to preserve detail on
    indexMaxZoom: 5,        // max zoom in the tile index
    indexMaxPoints: 100000, // max number of points per tile in the tile index
    solidChildren: false,   // whether to tile solid square tiles further
    tolerance: 3,           // simplification tolerance (higher means simpler)
    extent: 4096,           // tile extent
    buffer: 64,             // tile buffer on each side
    debug: 0                // logging level (0, 1 or 2)
};

function extend(dest, src) {
    for (var i in src) dest[i] = src[i];
    return dest;
}

// converts GeoJSON feature into an intermediate projected JSON vector format with simplification data

function convert(data, tolerance) {
    var features = [];
    /*
    if (data.type === 'FeatureCollection') {
        for (var i = 0; i < data.features.length; i++) {
            convertFeature(features, data.features[i], tolerance);
        }
    } else if (data.type === 'Feature') {
        convertFeature(features, data, tolerance);

    } else {
        // single geometry or a geometry collection
        convertFeature(features, {geometry: data}, tolerance);
    }
    return features;
    */
}

function convertFeature(features, feature, tolerance) {
    var geom = feature.geometry,
        type = geom.type,
        coords = geom.coordinates,
        tags = feature.properties,
        i, j, rings;
    /*
    if (type === 'Point') {
        features.push(create(tags, 1, [projectPoint(coords)]));

    } else if (type === 'MultiPoint') {
        features.push(create(tags, 1, project(coords)));

    } else if (type === 'LineString') {
        features.push(create(tags, 2, [project(coords, tolerance)]));

    } else if (type === 'MultiLineString' || type === 'Polygon') {
        rings = [];
        for (i = 0; i < coords.length; i++) {
            rings.push(project(coords[i], tolerance));
        }
        features.push(create(tags, type === 'Polygon' ? 3 : 2, rings));

    } else if (type === 'MultiPolygon') {
        rings = [];
        for (i = 0; i < coords.length; i++) {
            for (j = 0; j < coords[i].length; j++) {
                rings.push(project(coords[i][j], tolerance));
            }
        }
        features.push(create(tags, 3, rings));

    } else if (type === 'GeometryCollection') {
        for (i = 0; i < geom.geometries.length; i++) {
            convertFeature(features, {
                geometry: geom.geometries[i],
                properties: tags
            }, tolerance);
        }

    } else {
        throw new Error('Input data is not a valid GeoJSON object.');
    }
    */
}



================================================================


{
"type": "FeatureCollection",
"features": [{
"geometry": {
"type": "Point",
"coordinates": [-176.633, 51.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Adak,_Alaska",
"city": "Adak"
},
"id": "Adak"
}, {
"geometry": {
"type": "Point",
"coordinates": [-175.2, -21.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Nuku%CA%BBalofa",
"city": "Nuku%CA%BBalofa"
},
"id": "Nuku%CA%BBalofa"
}, {
"geometry": {
"type": "Point",
"coordinates": [-171.833, -13.833]
},
"type": "Feature",
"properties": {
"wikipedia": "Apia",
"city": "Apia"
},
"id": "Apia"
}, {
"geometry": {
"type": "Point",
"coordinates": [-170.7, -14.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Pago_Pago",
"city": "Pago Pago"
},
"id": "Pago Pago"
}, {
"geometry": {
"type": "Point",
"coordinates": [-169.917, -19.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Alofi",
"city": "Alofi"
},
"id": "Alofi"
}, {
"geometry": {
"type": "Point",
"coordinates": [-159.767, -21.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Avarua",
"city": "Avarua"
},
"id": "Avarua"
}, {
"geometry": {
"type": "Point",
"coordinates": [-157.817, 21.3]
},
"type": "Feature",
"properties": {
"wikipedia": "Honolulu",
"city": "Honolulu"
},
"id": "Honolulu"
}, {
"geometry": {
"type": "Point",
"coordinates": [-155.1, 19.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Hilo,_Hawaii",
"city": "Hilo"
},
"id": "Hilo"
}, {
"geometry": {
"type": "Point",
"coordinates": [-149.883, 61.217]
},
"type": "Feature",
"properties": {
"wikipedia": "Anchorage,_Alaska",
"city": "Anchorage"
},
"id": "Anchorage"
}, {
"geometry": {
"type": "Point",
"coordinates": [-149.567, -17.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Papeete",
"city": "Papeete"
},
"id": "Papeete"
}, {
"geometry": {
"type": "Point",
"coordinates": [-147.7, 64.833]
},
"type": "Feature",
"properties": {
"wikipedia": "Fairbanks,_Alaska",
"city": "Fairbanks"
},
"id": "Fairbanks"
}, {
"geometry": {
"type": "Point",
"coordinates": [-135.317, 57.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Sitka,_Alaska",
"city": "Sitka"
},
"id": "Sitka"
}, {
"geometry": {
"type": "Point",
"coordinates": [-135.05, 60.717]
},
"type": "Feature",
"properties": {
"wikipedia": "Whitehorse,_Yukon",
"city": "Whitehorse"
},
"id": "Whitehorse"
}, {
"geometry": {
"type": "Point",
"coordinates": [-134.5, 58.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Juneau,_Alaska",
"city": "Juneau"
},
"id": "Juneau"
}, {
"geometry": {
"type": "Point",
"coordinates": [-130.1, -25.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Adamstown,_Pitcairn_Islands",
"city": "Adamstown"
},
"id": "Adamstown"
}, {
"geometry": {
"type": "Point",
"coordinates": [-123.1, 49.25]
},
"type": "Feature",
"properties": {
"wikipedia": "Vancouver",
"city": "Vancouver"
},
"id": "Vancouver"
}, {
"geometry": {
"type": "Point",
"coordinates": [-12.05, 3.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Rabi_Island",
"city": "Rabi Island"
},
"id": "Rabi Island"
}, {
"geometry": {
"type": "Point",
"coordinates": [-122.667, 45.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Portland,_Oregon",
"city": "Portland"
},
"id": "Portland"
}, {
"geometry": {
"type": "Point",
"coordinates": [-122.417, 37.767]
},
"type": "Feature",
"properties": {
"wikipedia": "San_Francisco",
"city": "San Francisco"
},
"id": "San Francisco"
}, {
"geometry": {
"type": "Point",
"coordinates": [-122.317, 47.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Seattle",
"city": "Seattle"
},
"id": "Seattle"
}, {
"geometry": {
"type": "Point",
"coordinates": [-121.467, 38.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Sacramento,_California",
"city": "Sacramento"
},
"id": "Sacramento"
}, {
"geometry": {
"type": "Point",
"coordinates": [-118.25, 34.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Los_Angeles",
"city": "Los Angeles"
},
"id": "Los Angeles"
}, {
"geometry": {
"type": "Point",
"coordinates": [-117.383, 33.933]
},
"type": "Feature",
"properties": {
"wikipedia": "Riverside,_California",
"city": "Riverside"
},
"id": "Riverside"
}, {
"geometry": {
"type": "Point",
"coordinates": [-117.15, 32.767]
},
"type": "Feature",
"properties": {
"wikipedia": "San_Diego",
"city": "San Diego"
},
"id": "San Diego"
}, {
"geometry": {
"type": "Point",
"coordinates": [-117.033, 32.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Tijuana",
"city": "Tijuana"
},
"id": "Tijuana"
}, {
"geometry": {
"type": "Point",
"coordinates": [-115.467, 32.667]
},
"type": "Feature",
"properties": {
"wikipedia": "Mexicali",
"city": "Mexicali"
},
"id": "Mexicali"
}, {
"geometry": {
"type": "Point",
"coordinates": [-115.133, 36.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Las_Vegas,_Nevada",
"city": "Las Vegas"
},
"id": "Las Vegas"
}, {
"geometry": {
"type": "Point",
"coordinates": [-114.4, 62.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Yellowknife",
"city": "Yellowknife"
},
"id": "Yellowknife"
}, {
"geometry": {
"type": "Point",
"coordinates": [-114.05, 51.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Calgary",
"city": "Calgary"
},
"id": "Calgary"
}, {
"geometry": {
"type": "Point",
"coordinates": [-113.517, 53.567]
},
"type": "Feature",
"properties": {
"wikipedia": "Edmonton",
"city": "Edmonton"
},
"id": "Edmonton"
}, {
"geometry": {
"type": "Point",
"coordinates": [-112.067, 33.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Phoenix,_Arizona",
"city": "Phoenix"
},
"id": "Phoenix"
}, {
"geometry": {
"type": "Point",
"coordinates": [-111.883, 40.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Salt_Lake_City",
"city": "Salt Lake City"
},
"id": "Salt Lake City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-110.917, 32.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Tucson,_Arizona",
"city": "Tucson"
},
"id": "Tucson"
}, {
"geometry": {
"type": "Point",
"coordinates": [-109.433, 27.15]
},
"type": "Feature",
"properties": {
"wikipedia": "Hanga_Roa",
"city": "Hanga Roa"
},
"id": "Hanga Roa"
}, {
"geometry": {
"type": "Point",
"coordinates": [-106.65, 52.117]
},
"type": "Feature",
"properties": {
"wikipedia": "Saskatoon",
"city": "Saskatoon"
},
"id": "Saskatoon"
}, {
"geometry": {
"type": "Point",
"coordinates": [-106.6, 35.1]
},
"type": "Feature",
"properties": {
"wikipedia": "Albuquerque,_New_Mexico",
"city": "Albuquerque"
},
"id": "Albuquerque"
}, {
"geometry": {
"type": "Point",
"coordinates": [-106.417, 31.783]
},
"type": "Feature",
"properties": {
"wikipedia": "El_Paso,_Texas",
"city": "El Paso"
},
"id": "El Paso"
}, {
"geometry": {
"type": "Point",
"coordinates": [-106, 28.1]
},
"type": "Feature",
"properties": {
"wikipedia": "Chihuahua,_Chihuahua",
"city": "Chihuahua"
},
"id": "Chihuahua"
}, {
"geometry": {
"type": "Point",
"coordinates": [-104.983, 39.733]
},
"type": "Feature",
"properties": {
"wikipedia": "Denver",
"city": "Denver"
},
"id": "Denver"
}, {
"geometry": {
"type": "Point",
"coordinates": [-104.667, 24.017]
},
"type": "Feature",
"properties": {
"wikipedia": "Durango,_Durango",
"city": "Durango"
},
"id": "Durango"
}, {
"geometry": {
"type": "Point",
"coordinates": [-104.617, 50.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Regina,_Saskatchewan",
"city": "Regina"
},
"id": "Regina"
}, {
"geometry": {
"type": "Point",
"coordinates": [-103.4, 20.767]
},
"type": "Feature",
"properties": {
"wikipedia": "Zapopan,_Jalisco",
"city": "Zapopan"
},
"id": "Zapopan"
}, {
"geometry": {
"type": "Point",
"coordinates": [-103.35, 20.667]
},
"type": "Feature",
"properties": {
"wikipedia": "Guadalajara,_Jalisco",
"city": "Guadalajara"
},
"id": "Guadalajara"
}, {
"geometry": {
"type": "Point",
"coordinates": [-100.3, 25.667]
},
"type": "Feature",
"properties": {
"wikipedia": "Monterrey",
"city": "Monterrey"
},
"id": "Monterrey"
}, {
"geometry": {
"type": "Point",
"coordinates": [-99.117, 19.4]
},
"type": "Feature",
"properties": {
"wikipedia": "Mexico_City",
"city": "Mexico City"
},
"id": "Mexico City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-98.467, 29.533]
},
"type": "Feature",
"properties": {
"wikipedia": "San_Antonio",
"city": "San Antonio"
},
"id": "San Antonio"
}, {
"geometry": {
"type": "Point",
"coordinates": [-98.2, 19.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Puebla,_Puebla",
"city": "Puebla"
},
"id": "Puebla"
}, {
"geometry": {
"type": "Point",
"coordinates": [-97.767, 30.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Austin,_Texas",
"city": "Austin"
},
"id": "Austin"
}, {
"geometry": {
"type": "Point",
"coordinates": [-97.533, 35.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Oklahoma_City",
"city": "Oklahoma City"
},
"id": "Oklahoma City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-97.333, 37.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Wichita,_Kansas",
"city": "Wichita"
},
"id": "Wichita"
}, {
"geometry": {
"type": "Point",
"coordinates": [-97.133, 49.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Winnipeg",
"city": "Winnipeg"
},
"id": "Winnipeg"
}, {
"geometry": {
"type": "Point",
"coordinates": [-96.8, 32.767]
},
"type": "Feature",
"properties": {
"wikipedia": "Dallas",
"city": "Dallas"
},
"id": "Dallas"
}, {
"geometry": {
"type": "Point",
"coordinates": [-96.133, 19.183]
},
"type": "Feature",
"properties": {
"wikipedia": "Veracruz,_Veracruz",
"city": "Veracruz"
},
"id": "Veracruz"
}, {
"geometry": {
"type": "Point",
"coordinates": [-95.367, 29.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Houston",
"city": "Houston"
},
"id": "Houston"
}, {
"geometry": {
"type": "Point",
"coordinates": [-94.567, 39.1]
},
"type": "Feature",
"properties": {
"wikipedia": "Kansas_City,_Missouri",
"city": "Kansas City"
},
"id": "Kansas City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-93.25, 44.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Minneapolis",
"city": "Minneapolis"
},
"id": "Minneapolis"
}, {
"geometry": {
"type": "Point",
"coordinates": [-91.517, 14.833]
},
"type": "Feature",
"properties": {
"wikipedia": "Quetzaltenango",
"city": "Quetzaltenango"
},
"id": "Quetzaltenango"
}, {
"geometry": {
"type": "Point",
"coordinates": [-90.55, 14.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Guatemala_City",
"city": "Guatemala City"
},
"id": "Guatemala City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-90.183, 38.617]
},
"type": "Feature",
"properties": {
"wikipedia": "St._Louis,_Missouri",
"city": "St. Louis"
},
"id": "St. Louis"
}, {
"geometry": {
"type": "Point",
"coordinates": [-90.067, 29.967]
},
"type": "Feature",
"properties": {
"wikipedia": "New_Orleans",
"city": "New Orleans"
},
"id": "New Orleans"
}, {
"geometry": {
"type": "Point",
"coordinates": [-89.967, 35.117]
},
"type": "Feature",
"properties": {
"wikipedia": "Memphis,_Tennessee",
"city": "Memphis"
},
"id": "Memphis"
}, {
"geometry": {
"type": "Point",
"coordinates": [-89.617, 20.967]
},
"type": "Feature",
"properties": {
"wikipedia": "M%C3%A9rida,_Yucat%C3%A1n",
"city": "M%C3%A9rida"
},
"id": "M%C3%A9rida"
}, {
"geometry": {
"type": "Point",
"coordinates": [-89.183, 13.683]
},
"type": "Feature",
"properties": {
"wikipedia": "San_Salvador",
"city": "San Salvador"
},
"id": "San Salvador"
}, {
"geometry": {
"type": "Point",
"coordinates": [-88.767, 17.25]
},
"type": "Feature",
"properties": {
"wikipedia": "Belmopan",
"city": "Belmopan"
},
"id": "Belmopan"
}, {
"geometry": {
"type": "Point",
"coordinates": [-88.183, 17.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Belize_City",
"city": "Belize City"
},
"id": "Belize City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-87.95, 47.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Milwaukee",
"city": "Milwaukee"
},
"id": "Milwaukee"
}, {
"geometry": {
"type": "Point",
"coordinates": [-87.617, 41.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Chicago",
"city": "Chicago"
},
"id": "Chicago"
}, {
"geometry": {
"type": "Point",
"coordinates": [-87.217, 14.083]
},
"type": "Feature",
"properties": {
"wikipedia": "Tegucigalpa",
"city": "Tegucigalpa"
},
"id": "Tegucigalpa"
}, {
"geometry": {
"type": "Point",
"coordinates": [-86.783, 36.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Nashville,_Tennessee",
"city": "Nashville"
},
"id": "Nashville"
}, {
"geometry": {
"type": "Point",
"coordinates": [-86.25, 12.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Managua",
"city": "Managua"
},
"id": "Managua"
}, {
"geometry": {
"type": "Point",
"coordinates": [-86.15, 39.783]
},
"type": "Feature",
"properties": {
"wikipedia": "Indianapolis",
"city": "Indianapolis"
},
"id": "Indianapolis"
}, {
"geometry": {
"type": "Point",
"coordinates": [-85.75, 38.25]
},
"type": "Feature",
"properties": {
"wikipedia": "Louisville,_Kentucky",
"city": "Louisville"
},
"id": "Louisville"
}, {
"geometry": {
"type": "Point",
"coordinates": [-84.5, 39.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Cincinnati",
"city": "Cincinnati"
},
"id": "Cincinnati"
}, {
"geometry": {
"type": "Point",
"coordinates": [-84.383, 33.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Atlanta",
"city": "Atlanta"
},
"id": "Atlanta"
}, {
"geometry": {
"type": "Point",
"coordinates": [-84.083, 9.933]
},
"type": "Feature",
"properties": {
"wikipedia": "San_Jos%C3%A9,_Costa_Rica",
"city": "San Jos%C3%A9"
},
"id": "San Jos%C3%A9"
}, {
"geometry": {
"type": "Point",
"coordinates": [-83.05, 42.333]
},
"type": "Feature",
"properties": {
"wikipedia": "Detroit",
"city": "Detroit"
},
"id": "Detroit"
}, {
"geometry": {
"type": "Point",
"coordinates": [-82.983, 39.983]
},
"type": "Feature",
"properties": {
"wikipedia": "Columbus,_Ohio",
"city": "Columbus"
},
"id": "Columbus"
}, {
"geometry": {
"type": "Point",
"coordinates": [-82.467, 27.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Tampa,_Florida",
"city": "Tampa"
},
"id": "Tampa"
}, {
"geometry": {
"type": "Point",
"coordinates": [-82.383, 23.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Havana",
"city": "Havana"
},
"id": "Havana"
}, {
"geometry": {
"type": "Point",
"coordinates": [-81.667, 41.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Cleveland",
"city": "Cleveland"
},
"id": "Cleveland"
}, {
"geometry": {
"type": "Point",
"coordinates": [-81.65, 30.317]
},
"type": "Feature",
"properties": {
"wikipedia": "Jacksonville,_Florida",
"city": "Jacksonville"
},
"id": "Jacksonville"
}, {
"geometry": {
"type": "Point",
"coordinates": [100.317, 5.417]
},
"type": "Feature",
"properties": {
"wikipedia": "George_Town,_Penang",
"city": "George Town"
},
"id": "George Town"
}, {
"geometry": {
"type": "Point",
"coordinates": [-80.817, 35.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Charlotte,_North_Carolina",
"city": "Charlotte"
},
"id": "Charlotte"
}, {
"geometry": {
"type": "Point",
"coordinates": [-80.217, 25.783]
},
"type": "Feature",
"properties": {
"wikipedia": "Miami",
"city": "Miami"
},
"id": "Miami"
}, {
"geometry": {
"type": "Point",
"coordinates": [-79.967, 40.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Pittsburgh",
"city": "Pittsburgh"
},
"id": "Pittsburgh"
}, {
"geometry": {
"type": "Point",
"coordinates": [-79.883, 2.183]
},
"type": "Feature",
"properties": {
"wikipedia": "Guayaquil",
"city": "Guayaquil"
},
"id": "Guayaquil"
}, {
"geometry": {
"type": "Point",
"coordinates": [-79.517, 8.983]
},
"type": "Feature",
"properties": {
"wikipedia": "Panama_City",
"city": "Panama City"
},
"id": "Panama City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-79.383, 43.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Toronto",
"city": "Toronto"
},
"id": "Toronto"
}, {
"geometry": {
"type": "Point",
"coordinates": [-78.85, 42.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Buffalo,_New_York",
"city": "Buffalo"
},
"id": "Buffalo"
}, {
"geometry": {
"type": "Point",
"coordinates": [-78.633, 35.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Raleigh,_North_Carolina",
"city": "Raleigh"
},
"id": "Raleigh"
}, {
"geometry": {
"type": "Point",
"coordinates": [-78.583, 0.25]
},
"type": "Feature",
"properties": {
"wikipedia": "Quito",
"city": "Quito"
},
"id": "Quito"
}, {
"geometry": {
"type": "Point",
"coordinates": [-77.6, 43.15]
},
"type": "Feature",
"properties": {
"wikipedia": "Rochester,_New_York",
"city": "Rochester"
},
"id": "Rochester"
}, {
"geometry": {
"type": "Point",
"coordinates": [-77.333, 25.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Nassau,_Bahamas",
"city": "Nassau"
},
"id": "Nassau"
}, {
"geometry": {
"type": "Point",
"coordinates": [-77.033, 38.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Washington,_D.C.",
"city": "Washington"
},
"id": "Washington"
}, {
"geometry": {
"type": "Point",
"coordinates": [-77.017, -12.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Lima",
"city": "Lima"
},
"id": "Lima"
}, {
"geometry": {
"type": "Point",
"coordinates": [167.967, -29.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Kingston,_Norfolk_Island",
"city": "Kingston"
},
"id": "Kingston"
}, {
"geometry": {
"type": "Point",
"coordinates": [-76.617, 39.283]
},
"type": "Feature",
"properties": {
"wikipedia": "Baltimore",
"city": "Baltimore"
},
"id": "Baltimore"
}, {
"geometry": {
"type": "Point",
"coordinates": [-76.517, 3.417]
},
"type": "Feature",
"properties": {
"wikipedia": "Cali",
"city": "Cali"
},
"id": "Cali"
}, {
"geometry": {
"type": "Point",
"coordinates": [-75.983, 36.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Virginia_Beach",
"city": "Virginia Beach"
},
"id": "Virginia Beach"
}, {
"geometry": {
"type": "Point",
"coordinates": [-75.8, 20.017]
},
"type": "Feature",
"properties": {
"wikipedia": "Santiago_de_Cuba",
"city": "Santiago de Cuba"
},
"id": "Santiago de Cuba"
}, {
"geometry": {
"type": "Point",
"coordinates": [-75.683, 45.417]
},
"type": "Feature",
"properties": {
"wikipedia": "Ottawa",
"city": "Ottawa"
},
"id": "Ottawa"
}, {
"geometry": {
"type": "Point",
"coordinates": [-75.567, 6.233]
},
"type": "Feature",
"properties": {
"wikipedia": "Medell%C3%ADn",
"city": "Medell%C3%ADn"
},
"id": "Medell%C3%ADn"
}, {
"geometry": {
"type": "Point",
"coordinates": [-75.5, 10.4]
},
"type": "Feature",
"properties": {
"wikipedia": "Cartagena,_Colombia",
"city": "Cartagena"
},
"id": "Cartagena"
}, {
"geometry": {
"type": "Point",
"coordinates": [-75.167, 39.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Philadelphia",
"city": "Philadelphia"
},
"id": "Philadelphia"
}, {
"geometry": {
"type": "Point",
"coordinates": [-74.783, 10.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Barranquilla",
"city": "Barranquilla"
},
"id": "Barranquilla"
}, {
"geometry": {
"type": "Point",
"coordinates": [-74.183, 39.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Forked_River",
"city": "Forked River"
},
"id": "Forked River"
}, {
"geometry": {
"type": "Point",
"coordinates": [-74.133, 41.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Jersey_City,_New_Jersey",
"city": "Jersey City"
},
"id": "Jersey City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-74.067, 4.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Bogot%C3%A1",
"city": "Bogot%C3%A1"
},
"id": "Bogot%C3%A1"
}, {
"geometry": {
"type": "Point",
"coordinates": [-74, 40.717]
},
"type": "Feature",
"properties": {
"wikipedia": "New_York_City",
"city": "New York City"
},
"id": "New York City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-73.55, 45.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Montreal",
"city": "Montreal"
},
"id": "Montreal"
}, {
"geometry": {
"type": "Point",
"coordinates": [-73.25, -3.733]
},
"type": "Feature",
"properties": {
"wikipedia": "Iquitos",
"city": "Iquitos"
},
"id": "Iquitos"
}, {
"geometry": {
"type": "Point",
"coordinates": [-73.233, -39.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Valdivia,_Chile",
"city": "Valdivia"
},
"id": "Valdivia"
}, {
"geometry": {
"type": "Point",
"coordinates": [-73.05, -36.833]
},
"type": "Feature",
"properties": {
"wikipedia": "Concepci%C3%B3n,_Chile",
"city": "Concepci%C3%B3n"
},
"id": "Concepci%C3%B3n"
}, {
"geometry": {
"type": "Point",
"coordinates": [-72.333, 18.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Port-au-Prince",
"city": "Port-au-Prince"
},
"id": "Port-au-Prince"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.967, -13.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Cusco",
"city": "Cusco"
},
"id": "Cusco"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.633, -10.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Maracaibo",
"city": "Maracaibo"
},
"id": "Maracaibo"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.617, -33.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Valpara%C3%ADso",
"city": "Valpara%C3%ADso"
},
"id": "Valpara%C3%ADso"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.533, -16.4]
},
"type": "Feature",
"properties": {
"wikipedia": "Arequipa",
"city": "Arequipa"
},
"id": "Arequipa"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.417, 41.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Providence,_Rhode_Island",
"city": "Providence"
},
"id": "Providence"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.3, -41.15]
},
"type": "Feature",
"properties": {
"wikipedia": "San_Carlos_de_Bariloche",
"city": "San Carlos de Bariloche"
},
"id": "San Carlos de Bariloche"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.25, -29.9]
},
"type": "Feature",
"properties": {
"wikipedia": "La_Serena,_Chile",
"city": "La Serena"
},
"id": "La Serena"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.217, 46.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Quebec_City",
"city": "Quebec City"
},
"id": "Quebec City"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.133, 21.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Cockburn_Town",
"city": "Cockburn Town"
},
"id": "Cockburn Town"
}, {
"geometry": {
"type": "Point",
"coordinates": [-71.05, 42.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Boston",
"city": "Boston"
},
"id": "Boston"
}, {
"geometry": {
"type": "Point",
"coordinates": [-70.933, -53.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Punta_Arenas,_Chile",
"city": "Punta Arenas"
},
"id": "Punta Arenas"
}, {
"geometry": {
"type": "Point",
"coordinates": [-70.667, -33.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Santiago,_Chile",
"city": "Santiago"
},
"id": "Santiago"
}, {
"geometry": {
"type": "Point",
"coordinates": [-70.4, -23.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Antofagasta",
"city": "Antofagasta"
},
"id": "Antofagasta"
}, {
"geometry": {
"type": "Point",
"coordinates": [-70.15, -20.217]
},
"type": "Feature",
"properties": {
"wikipedia": "Iquique",
"city": "Iquique"
},
"id": "Iquique"
}, {
"geometry": {
"type": "Point",
"coordinates": [-70.033, 12.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Oranjestad,_Aruba",
"city": "Oranjestad"
},
"id": "Oranjestad"
}, {
"geometry": {
"type": "Point",
"coordinates": [-69.917, 18.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Santo_Domingo",
"city": "Santo Domingo"
},
"id": "Santo Domingo"
}, {
"geometry": {
"type": "Point",
"coordinates": [-69.35, -10.117]
},
"type": "Feature",
"properties": {
"wikipedia": "Rio_Branco",
"city": "Rio Branco"
},
"id": "Rio Branco"
}, {
"geometry": {
"type": "Point",
"coordinates": [-68.933, 12.117]
},
"type": "Feature",
"properties": {
"wikipedia": "Willemstad",
"city": "Willemstad"
},
"id": "Willemstad"
}, {
"geometry": {
"type": "Point",
"coordinates": [-68.933, -22.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Calama,_Chile",
"city": "Calama"
},
"id": "Calama"
}, {
"geometry": {
"type": "Point",
"coordinates": [-68.817, -32.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Mendoza,_Argentina",
"city": "Mendoza"
},
"id": "Mendoza"
}, {
"geometry": {
"type": "Point",
"coordinates": [-68.517, 63.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Iqaluit",
"city": "Iqaluit"
},
"id": "Iqaluit"
}, {
"geometry": {
"type": "Point",
"coordinates": [-68.3, -54.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Ushuaia",
"city": "Ushuaia"
},
"id": "Ushuaia"
}, {
"geometry": {
"type": "Point",
"coordinates": [-68.15, -16.5]
},
"type": "Feature",
"properties": {
"wikipedia": "La_Paz",
"city": "La Paz"
},
"id": "La Paz"
}, {
"geometry": {
"type": "Point",
"coordinates": [-67.617, 54.933]
},
"type": "Feature",
"properties": {
"wikipedia": "Puerto_Williams",
"city": "Puerto Williams"
},
"id": "Puerto Williams"
}, {
"geometry": {
"type": "Point",
"coordinates": [-66.917, 10.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Caracas",
"city": "Caracas"
},
"id": "Caracas"
}, {
"geometry": {
"type": "Point",
"coordinates": [-66.667, 45.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Fredericton",
"city": "Fredericton"
},
"id": "Fredericton"
}, {
"geometry": {
"type": "Point",
"coordinates": [-66.067, 18.45]
},
"type": "Feature",
"properties": {
"wikipedia": "San_Juan,_Puerto_Rico",
"city": "San Juan"
},
"id": "San Juan"
}, {
"geometry": {
"type": "Point",
"coordinates": [-66.05, 45.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Saint_John,_New_Brunswick",
"city": "Saint John"
},
"id": "Saint John"
}, {
"geometry": {
"type": "Point",
"coordinates": [-65.25, -19.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Sucre",
"city": "Sucre"
},
"id": "Sucre"
}, {
"geometry": {
"type": "Point",
"coordinates": [-64.95, -18.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Charlotte_Amalie,_United_States_Virgin_Islands",
"city": "Charlotte Amalie"
},
"id": "Charlotte Amalie"
}, {
"geometry": {
"type": "Point",
"coordinates": [175.283, -37.783]
},
"type": "Feature",
"properties": {
"wikipedia": "Hamilton,_New_Zealand",
"city": "Hamilton"
},
"id": "Hamilton"
}, {
"geometry": {
"type": "Point",
"coordinates": [-64.617, 18.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Road_Town",
"city": "Road Town"
},
"id": "Road Town"
}, {
"geometry": {
"type": "Point",
"coordinates": [-64.183, -31.4]
},
"type": "Feature",
"properties": {
"wikipedia": "C%C3%B3rdoba,_Argentina",
"city": "C%C3%B3rdoba"
},
"id": "C%C3%B3rdoba"
}, {
"geometry": {
"type": "Point",
"coordinates": [-63.9, -8.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Porto_Velho",
"city": "Porto Velho"
},
"id": "Porto Velho"
}, {
"geometry": {
"type": "Point",
"coordinates": [-63.6, 44.667]
},
"type": "Feature",
"properties": {
"wikipedia": "City_of_Halifax",
"city": "City of Halifax"
},
"id": "City of Halifax"
}, {
"geometry": {
"type": "Point",
"coordinates": [-63.167, -17.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Santa_Cruz_de_la_Sierra",
"city": "Santa Cruz de la Sierra"
},
"id": "Santa Cruz de la Sierra"
}, {
"geometry": {
"type": "Point",
"coordinates": [-63.133, 46.233]
},
"type": "Feature",
"properties": {
"wikipedia": "Charlottetown",
"city": "Charlottetown"
},
"id": "Charlottetown"
}, {
"geometry": {
"type": "Point",
"coordinates": [-63.05, 18.217]
},
"type": "Feature",
"properties": {
"wikipedia": "The_Valley,_Anguilla",
"city": "The Valley"
},
"id": "The Valley"
}, {
"geometry": {
"type": "Point",
"coordinates": [-61.717, 15.983]
},
"type": "Feature",
"properties": {
"wikipedia": "Basse-Terre",
"city": "Basse-Terre"
},
"id": "Basse-Terre"
}, {
"geometry": {
"type": "Point",
"coordinates": [-62.267, -38.717]
},
"type": "Feature",
"properties": {
"wikipedia": "Bah%C3%ADa_Blanca",
"city": "Bah%C3%ADa Blanca"
},
"id": "Bah%C3%ADa Blanca"
}, {
"geometry": {
"type": "Point",
"coordinates": [-52.7, 47.55]
},
"type": "Feature",
"properties": {
"wikipedia": "St._John%27s,_Newfoundland_and_Labrador",
"city": "St. John%27s"
},
"id": "St. John%27s"
}, {
"geometry": {
"type": "Point",
"coordinates": [-61.75, 12.05]
},
"type": "Feature",
"properties": {
"wikipedia": "St._George%27s,_Grenada",
"city": "St. George%27s"
},
"id": "St. George%27s"
}, {
"geometry": {
"type": "Point",
"coordinates": [-61.517, 10.667]
},
"type": "Feature",
"properties": {
"wikipedia": "Port_of_Spain",
"city": "Port of Spain"
},
"id": "Port of Spain"
}, {
"geometry": {
"type": "Point",
"coordinates": [-61.467, 10.283]
},
"type": "Feature",
"properties": {
"wikipedia": "San_Fernando,_Trinidad_and_Tobago",
"city": "San Fernando"
},
"id": "San Fernando"
}, {
"geometry": {
"type": "Point",
"coordinates": [-61.383, 15.3]
},
"type": "Feature",
"properties": {
"wikipedia": "Roseau",
"city": "Roseau"
},
"id": "Roseau"
}, {
"geometry": {
"type": "Point",
"coordinates": [-61.383, 10.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Chaguanas",
"city": "Chaguanas"
},
"id": "Chaguanas"
}, {
"geometry": {
"type": "Point",
"coordinates": [-61.233, 13.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Kingstown",
"city": "Kingstown"
},
"id": "Kingstown"
}, {
"geometry": {
"type": "Point",
"coordinates": [-61.083, 14.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Fort-de-France",
"city": "Fort-de-France"
},
"id": "Fort-de-France"
}, {
"geometry": {
"type": "Point",
"coordinates": [-60.983, 14.017]
},
"type": "Feature",
"properties": {
"wikipedia": "Castries",
"city": "Castries"
},
"id": "Castries"
}, {
"geometry": {
"type": "Point",
"coordinates": [-60.667, -32.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Rosario,_Santa_Fe",
"city": "Rosario"
},
"id": "Rosario"
}, {
"geometry": {
"type": "Point",
"coordinates": [-60.65, 2.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Boa_Vista,_Roraima",
"city": "Boa Vista"
},
"id": "Boa Vista"
}, {
"geometry": {
"type": "Point",
"coordinates": [-60.017, -3.1]
},
"type": "Feature",
"properties": {
"wikipedia": "Manaus",
"city": "Manaus"
},
"id": "Manaus"
}, {
"geometry": {
"type": "Point",
"coordinates": [-59.617, 13.083]
},
"type": "Feature",
"properties": {
"wikipedia": "Bridgetown",
"city": "Bridgetown"
},
"id": "Bridgetown"
}, {
"geometry": {
"type": "Point",
"coordinates": [-58.367, -34.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Buenos_Aires",
"city": "Buenos Aires"
},
"id": "Buenos Aires"
}, {
"geometry": {
"type": "Point",
"coordinates": [-57.85, 51.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Stanley,_Falkland_Islands",
"city": "Stanley"
},
"id": "Stanley"
}, {
"geometry": {
"type": "Point",
"coordinates": [-57.667, -25.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Asunci%C3%B3n",
"city": "Asunci%C3%B3n"
},
"id": "Asunci%C3%B3n"
}, {
"geometry": {
"type": "Point",
"coordinates": [-56.167, 46.767]
},
"type": "Feature",
"properties": {
"wikipedia": "Saint-Pierre,_Saint_Pierre_and_Miquelon",
"city": "Saint-Pierre"
},
"id": "Saint-Pierre"
}, {
"geometry": {
"type": "Point",
"coordinates": [-56.167, -34.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Montevideo",
"city": "Montevideo"
},
"id": "Montevideo"
}, {
"geometry": {
"type": "Point",
"coordinates": [-56.083, -15.583]
},
"type": "Feature",
"properties": {
"wikipedia": "Cuiab%C3%A1",
"city": "Cuiab%C3%A1"
},
"id": "Cuiab%C3%A1"
}, {
"geometry": {
"type": "Point",
"coordinates": [-55.167, 5.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Paramaribo",
"city": "Paramaribo"
},
"id": "Paramaribo"
}, {
"geometry": {
"type": "Point",
"coordinates": [-54.633, -20.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Campo_Grande",
"city": "Campo Grande"
},
"id": "Campo Grande"
}, {
"geometry": {
"type": "Point",
"coordinates": [-54.617, -25.417]
},
"type": "Feature",
"properties": {
"wikipedia": "Ciudad_del_Este",
"city": "Ciudad del Este"
},
"id": "Ciudad del Este"
}, {
"geometry": {
"type": "Point",
"coordinates": [-53.45, -33.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Chu%C3%AD",
"city": "Chu%C3%AD"
},
"id": "Chu%C3%AD"
}, {
"geometry": {
"type": "Point",
"coordinates": [-52.333, -31.767]
},
"type": "Feature",
"properties": {
"wikipedia": "Pelotas",
"city": "Pelotas"
},
"id": "Pelotas"
}, {
"geometry": {
"type": "Point",
"coordinates": [-52.317, 4.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Cayenne",
"city": "Cayenne"
},
"id": "Cayenne"
}, {
"geometry": {
"type": "Point",
"coordinates": [-51.75, 64.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Nuuk",
"city": "Nuuk"
},
"id": "Nuuk"
}, {
"geometry": {
"type": "Point",
"coordinates": [-51.217, 30.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Porto_Alegre",
"city": "Porto Alegre"
},
"id": "Porto Alegre"
}, {
"geometry": {
"type": "Point",
"coordinates": [-51.05, 0.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Macap%C3%A1",
"city": "Macap%C3%A1"
},
"id": "Macap%C3%A1"
}, {
"geometry": {
"type": "Point",
"coordinates": [-50.4, -22.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Assis",
"city": "Assis"
},
"id": "Assis"
}, {
"geometry": {
"type": "Point",
"coordinates": [-49.25, -25.417]
},
"type": "Feature",
"properties": {
"wikipedia": "Curitiba",
"city": "Curitiba"
},
"id": "Curitiba"
}, {
"geometry": {
"type": "Point",
"coordinates": [-48.483, 1.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Bel%C3%A9m",
"city": "Bel%C3%A9m"
},
"id": "Bel%C3%A9m"
}, {
"geometry": {
"type": "Point",
"coordinates": [-47.9, -15.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Bras%C3%ADlia",
"city": "Bras%C3%ADlia"
},
"id": "Bras%C3%ADlia"
}, {
"geometry": {
"type": "Point",
"coordinates": [-47.05, -22.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Campinas",
"city": "Campinas"
},
"id": "Campinas"
}, {
"geometry": {
"type": "Point",
"coordinates": [-46.633, -23.55]
},
"type": "Feature",
"properties": {
"wikipedia": "S%C3%A3o_Paulo",
"city": "S%C3%A3o Paulo"
},
"id": "S%C3%A3o Paulo"
}, {
"geometry": {
"type": "Point",
"coordinates": [-45.867, -23.183]
},
"type": "Feature",
"properties": {
"wikipedia": "S%C3%A3o_Jos%C3%A9_dos_Campos",
"city": "S%C3%A3o Jos%C3%A9 dos Campos"
},
"id": "S%C3%A3o Jos%C3%A9 dos Campos"
}, {
"geometry": {
"type": "Point",
"coordinates": [-43.233, -22.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Rio_de_Janeiro",
"city": "Rio de Janeiro"
},
"id": "Rio de Janeiro"
}, {
"geometry": {
"type": "Point",
"coordinates": [-40.333, -20.317]
},
"type": "Feature",
"properties": {
"wikipedia": "Vit%C3%B3ria,_Brazil",
"city": "Vit%C3%B3ria"
},
"id": "Vit%C3%B3ria"
}, {
"geometry": {
"type": "Point",
"coordinates": [-39.05, -14.783]
},
"type": "Feature",
"properties": {
"wikipedia": "Ilh%C3%A9us",
"city": "Ilh%C3%A9us"
},
"id": "Ilh%C3%A9us"
}, {
"geometry": {
"type": "Point",
"coordinates": [-38.567, -3.767]
},
"type": "Feature",
"properties": {
"wikipedia": "Fortaleza",
"city": "Fortaleza"
},
"id": "Fortaleza"
}, {
"geometry": {
"type": "Point",
"coordinates": [-35.717, -9.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Macei%C3%B3",
"city": "Macei%C3%B3"
},
"id": "Macei%C3%B3"
}, {
"geometry": {
"type": "Point",
"coordinates": [-34.867, -8.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Recife",
"city": "Recife"
},
"id": "Recife"
}, {
"geometry": {
"type": "Point",
"coordinates": [-28.633, 38.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Horta_(Azores)",
"city": "Horta (Azores)"
},
"id": "Horta (Azores)"
}, {
"geometry": {
"type": "Point",
"coordinates": [-27.217, 38.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Angra_do_Hero%C3%ADsmo",
"city": "Angra do Hero%C3%ADsmo"
},
"id": "Angra do Hero%C3%ADsmo"
}, {
"geometry": {
"type": "Point",
"coordinates": [-25.667, 37.733]
},
"type": "Feature",
"properties": {
"wikipedia": "Ponta_Delgada,_S%C3%A3o_Miguel_Island",
"city": "Ponta Delgada"
},
"id": "Ponta Delgada"
}, {
"geometry": {
"type": "Point",
"coordinates": [-23.517, 14.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Praia",
"city": "Praia"
},
"id": "Praia"
}, {
"geometry": {
"type": "Point",
"coordinates": [-21.933, 64.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Reykjav%C3%ADk",
"city": "Reykjav%C3%ADk"
},
"id": "Reykjav%C3%ADk"
}, {
"geometry": {
"type": "Point",
"coordinates": [-17.433, 14.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Dakar",
"city": "Dakar"
},
"id": "Dakar"
}, {
"geometry": {
"type": "Point",
"coordinates": [-17.1, 14.833]
},
"type": "Feature",
"properties": {
"wikipedia": "Thi%C3%A8s",
"city": "Thi%C3%A8s"
},
"id": "Thi%C3%A8s"
}, {
"geometry": {
"type": "Point",
"coordinates": [-16.667, 13.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Serekunda",
"city": "Serekunda"
},
"id": "Serekunda"
}, {
"geometry": {
"type": "Point",
"coordinates": [-16.65, 13.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Brikama",
"city": "Brikama"
},
"id": "Brikama"
}, {
"geometry": {
"type": "Point",
"coordinates": [-16.567, 13.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Banjul",
"city": "Banjul"
},
"id": "Banjul"
}, {
"geometry": {
"type": "Point",
"coordinates": [-16.25, 28.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Santa_Cruz_de_Tenerife",
"city": "Santa Cruz de Tenerife"
},
"id": "Santa Cruz de Tenerife"
}, {
"geometry": {
"type": "Point",
"coordinates": [-15.95, 18.1]
},
"type": "Feature",
"properties": {
"wikipedia": "Nouakchott",
"city": "Nouakchott"
},
"id": "Nouakchott"
}, {
"geometry": {
"type": "Point",
"coordinates": [-15.583, 11.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Bissau",
"city": "Bissau"
},
"id": "Bissau"
}, {
"geometry": {
"type": "Point",
"coordinates": [-15.433, 28.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Las_Palmas_de_Gran_Canaria",
"city": "Las Palmas de Gran Canaria"
},
"id": "Las Palmas de Gran Canaria"
}, {
"geometry": {
"type": "Point",
"coordinates": [-13.7, 9.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Conakry",
"city": "Conakry"
},
"id": "Conakry"
}, {
"geometry": {
"type": "Point",
"coordinates": [-13.267, 8.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Freetown",
"city": "Freetown"
},
"id": "Freetown"
}, {
"geometry": {
"type": "Point",
"coordinates": [-13.2, 27.15]
},
"type": "Feature",
"properties": {
"wikipedia": "El_Aai%C3%BAn",
"city": "El Aai%C3%BAn"
},
"id": "El Aai%C3%BAn"
}, {
"geometry": {
"type": "Point",
"coordinates": [-10.767, 6.317]
},
"type": "Feature",
"properties": {
"wikipedia": "Monrovia",
"city": "Monrovia"
},
"id": "Monrovia"
}, {
"geometry": {
"type": "Point",
"coordinates": [-9.183, 38.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Lisbon",
"city": "Lisbon"
},
"id": "Lisbon"
}, {
"geometry": {
"type": "Point",
"coordinates": [-8.633, 41.15]
},
"type": "Feature",
"properties": {
"wikipedia": "Porto",
"city": "Porto"
},
"id": "Porto"
}, {
"geometry": {
"type": "Point",
"coordinates": [-8.467, 51.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Cork_(city)",
"city": "Cork (city)"
},
"id": "Cork (city)"
}, {
"geometry": {
"type": "Point",
"coordinates": [-8, 31.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Marrakech",
"city": "Marrakech"
},
"id": "Marrakech"
}, {
"geometry": {
"type": "Point",
"coordinates": [-8, 12.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Bamako",
"city": "Bamako"
},
"id": "Bamako"
}, {
"geometry": {
"type": "Point",
"coordinates": [-7.583, 33.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Casablanca",
"city": "Casablanca"
},
"id": "Casablanca"
}, {
"geometry": {
"type": "Point",
"coordinates": [-7.567, 12.983]
},
"type": "Feature",
"properties": {
"wikipedia": "Koulikoro",
"city": "Koulikoro"
},
"id": "Koulikoro"
}, {
"geometry": {
"type": "Point",
"coordinates": [-6.833, 34.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Rabat",
"city": "Rabat"
},
"id": "Rabat"
}, {
"geometry": {
"type": "Point",
"coordinates": [-6.783, 62]
},
"type": "Feature",
"properties": {
"wikipedia": "T%C3%B3rshavn",
"city": "T%C3%B3rshavn"
},
"id": "T%C3%B3rshavn"
}, {
"geometry": {
"type": "Point",
"coordinates": [-6.267, 53.333]
},
"type": "Feature",
"properties": {
"wikipedia": "Dublin",
"city": "Dublin"
},
"id": "Dublin"
}, {
"geometry": {
"type": "Point",
"coordinates": [-5.983, 37.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Seville",
"city": "Seville"
},
"id": "Seville"
}, {
"geometry": {
"type": "Point",
"coordinates": [-5.917, 54.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Belfast",
"city": "Belfast"
},
"id": "Belfast"
}, {
"geometry": {
"type": "Point",
"coordinates": [-5.733, -15.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Jamestown,_Saint_Helena",
"city": "Jamestown"
},
"id": "Jamestown"
}, {
"geometry": {
"type": "Point",
"coordinates": [-5.35, 36.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Gibraltar",
"city": "Gibraltar"
},
"id": "Gibraltar"
}, {
"geometry": {
"type": "Point",
"coordinates": [-5.283, 6.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Yamoussoukro",
"city": "Yamoussoukro"
},
"id": "Yamoussoukro"
}, {
"geometry": {
"type": "Point",
"coordinates": [-4.483, 54.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Douglas,_Isle_of_Man",
"city": "Douglas"
},
"id": "Douglas"
}, {
"geometry": {
"type": "Point",
"coordinates": [-4.417, 36.717]
},
"type": "Feature",
"properties": {
"wikipedia": "M%C3%A1laga",
"city": "M%C3%A1laga"
},
"id": "M%C3%A1laga"
}, {
"geometry": {
"type": "Point",
"coordinates": [-4.25, 55.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Glasgow",
"city": "Glasgow"
},
"id": "Glasgow"
}, {
"geometry": {
"type": "Point",
"coordinates": [-4.017, 5.333]
},
"type": "Feature",
"properties": {
"wikipedia": "Abidjan",
"city": "Abidjan"
},
"id": "Abidjan"
}, {
"geometry": {
"type": "Point",
"coordinates": [-3.683, 40.4]
},
"type": "Feature",
"properties": {
"wikipedia": "Madrid",
"city": "Madrid"
},
"id": "Madrid"
}, {
"geometry": {
"type": "Point",
"coordinates": [-3.183, 51.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Cardiff",
"city": "Cardiff"
},
"id": "Cardiff"
}, {
"geometry": {
"type": "Point",
"coordinates": [-3.15, 55.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Edinburgh",
"city": "Edinburgh"
},
"id": "Edinburgh"
}, {
"geometry": {
"type": "Point",
"coordinates": [-3, 16.767]
},
"type": "Feature",
"properties": {
"wikipedia": "Timbuktu",
"city": "Timbuktu"
},
"id": "Timbuktu"
}, {
"geometry": {
"type": "Point",
"coordinates": [-2.983, 53.4]
},
"type": "Feature",
"properties": {
"wikipedia": "Liverpool",
"city": "Liverpool"
},
"id": "Liverpool"
}, {
"geometry": {
"type": "Point",
"coordinates": [-2.917, 43.25]
},
"type": "Feature",
"properties": {
"wikipedia": "Bilbao",
"city": "Bilbao"
},
"id": "Bilbao"
}, {
"geometry": {
"type": "Point",
"coordinates": [-2.233, 53.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Manchester",
"city": "Manchester"
},
"id": "Manchester"
}, {
"geometry": {
"type": "Point",
"coordinates": [-2.1, 57.15]
},
"type": "Feature",
"properties": {
"wikipedia": "Aberdeen",
"city": "Aberdeen"
},
"id": "Aberdeen"
}, {
"geometry": {
"type": "Point",
"coordinates": [-1.883, 52.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Birmingham",
"city": "Birmingham"
},
"id": "Birmingham"
}, {
"geometry": {
"type": "Point",
"coordinates": [-1.55, 53.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Leeds",
"city": "Leeds"
},
"id": "Leeds"
}, {
"geometry": {
"type": "Point",
"coordinates": [-1.55, 47.217]
},
"type": "Feature",
"properties": {
"wikipedia": "Nantes",
"city": "Nantes"
},
"id": "Nantes"
}, {
"geometry": {
"type": "Point",
"coordinates": [-1.533, 12.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Ouagadougou",
"city": "Ouagadougou"
},
"id": "Ouagadougou"
}, {
"geometry": {
"type": "Point",
"coordinates": [-0.85, 9.4]
},
"type": "Feature",
"properties": {
"wikipedia": "Tamale,_Ghana",
"city": "Tamale"
},
"id": "Tamale"
}, {
"geometry": {
"type": "Point",
"coordinates": [-0.367, 39.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Valencia,_Spain",
"city": "Valencia"
},
"id": "Valencia"
}, {
"geometry": {
"type": "Point",
"coordinates": [-0.2, 5.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Accra",
"city": "Accra"
},
"id": "Accra"
}, {
"geometry": {
"type": "Point",
"coordinates": [-0.117, 51.5]
},
"type": "Feature",
"properties": {
"wikipedia": "London",
"city": "London"
},
"id": "London"
}, {
"geometry": {
"type": "Point",
"coordinates": [0, 51.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Greenwich",
"city": "Greenwich"
},
"id": "Greenwich"
}, {
"geometry": {
"type": "Point",
"coordinates": [1.2, 6.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Lom%C3%A9",
"city": "Lom%C3%A9"
},
"id": "Lom%C3%A9"
}, {
"geometry": {
"type": "Point",
"coordinates": [1.433, 43.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Toulouse",
"city": "Toulouse"
},
"id": "Toulouse"
}, {
"geometry": {
"type": "Point",
"coordinates": [1.5, 42.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Andorra_la_Vella",
"city": "Andorra la Vella"
},
"id": "Andorra la Vella"
}, {
"geometry": {
"type": "Point",
"coordinates": [1.717, 39.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Ibiza",
"city": "Ibiza"
},
"id": "Ibiza"
}, {
"geometry": {
"type": "Point",
"coordinates": [2.1, 13.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Niamey",
"city": "Niamey"
},
"id": "Niamey"
}, {
"geometry": {
"type": "Point",
"coordinates": [2.183, 41.383]
},
"type": "Feature",
"properties": {
"wikipedia": "Barcelona",
"city": "Barcelona"
},
"id": "Barcelona"
}, {
"geometry": {
"type": "Point",
"coordinates": [2.333, 48.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Paris",
"city": "Paris"
},
"id": "Paris"
}, {
"geometry": {
"type": "Point",
"coordinates": [2.417, 6.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Cotonou",
"city": "Cotonou"
},
"id": "Cotonou"
}, {
"geometry": {
"type": "Point",
"coordinates": [2.6, 6.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Porto-Novo",
"city": "Porto-Novo"
},
"id": "Porto-Novo"
}, {
"geometry": {
"type": "Point",
"coordinates": [2.65, 39.567]
},
"type": "Feature",
"properties": {
"wikipedia": "Palma,_Majorca",
"city": "Palma"
},
"id": "Palma"
}, {
"geometry": {
"type": "Point",
"coordinates": [3.217, 36.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Algiers",
"city": "Algiers"
},
"id": "Algiers"
}, {
"geometry": {
"type": "Point",
"coordinates": [3.383, 6.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Lagos",
"city": "Lagos"
},
"id": "Lagos"
}, {
"geometry": {
"type": "Point",
"coordinates": [3.883, 7.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Ibadan",
"city": "Ibadan"
},
"id": "Ibadan"
}, {
"geometry": {
"type": "Point",
"coordinates": [4.3, 52.067]
},
"type": "Feature",
"properties": {
"wikipedia": "The_Hague",
"city": "The Hague"
},
"id": "The Hague"
}, {
"geometry": {
"type": "Point",
"coordinates": [4.35, 50.833]
},
"type": "Feature",
"properties": {
"wikipedia": "Brussels",
"city": "Brussels"
},
"id": "Brussels"
}, {
"geometry": {
"type": "Point",
"coordinates": [4.4, 51.217]
},
"type": "Feature",
"properties": {
"wikipedia": "Antwerp",
"city": "Antwerp"
},
"id": "Antwerp"
}, {
"geometry": {
"type": "Point",
"coordinates": [4.467, 51.933]
},
"type": "Feature",
"properties": {
"wikipedia": "Rotterdam",
"city": "Rotterdam"
},
"id": "Rotterdam"
}, {
"geometry": {
"type": "Point",
"coordinates": [4.833, 45.767]
},
"type": "Feature",
"properties": {
"wikipedia": "Lyon",
"city": "Lyon"
},
"id": "Lyon"
}, {
"geometry": {
"type": "Point",
"coordinates": [4.883, 52.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Amsterdam",
"city": "Amsterdam"
},
"id": "Amsterdam"
}, {
"geometry": {
"type": "Point",
"coordinates": [5.367, 43.3]
},
"type": "Feature",
"properties": {
"wikipedia": "Marseille",
"city": "Marseille"
},
"id": "Marseille"
}, {
"geometry": {
"type": "Point",
"coordinates": [5.4, 60.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Bergen",
"city": "Bergen"
},
"id": "Bergen"
}, {
"geometry": {
"type": "Point",
"coordinates": [6.117, 49.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Luxembourg_(city)",
"city": "Luxembourg (city)"
},
"id": "Luxembourg (city)"
}, {
"geometry": {
"type": "Point",
"coordinates": [6.15, 46.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Geneva",
"city": "Geneva"
},
"id": "Geneva"
}, {
"geometry": {
"type": "Point",
"coordinates": [6.683, 0.333]
},
"type": "Feature",
"properties": {
"wikipedia": "S%C3%A3o_Tom%C3%A9",
"city": "S%C3%A3o Tom%C3%A9"
},
"id": "S%C3%A3o Tom%C3%A9"
}, {
"geometry": {
"type": "Point",
"coordinates": [6.783, 51.233]
},
"type": "Feature",
"properties": {
"wikipedia": "D%C3%BCsseldorf",
"city": "D%C3%BCsseldorf"
},
"id": "D%C3%BCsseldorf"
}, {
"geometry": {
"type": "Point",
"coordinates": [6.967, 50.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Cologne",
"city": "Cologne"
},
"id": "Cologne"
}, {
"geometry": {
"type": "Point",
"coordinates": [7, 43.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Cannes",
"city": "Cannes"
},
"id": "Cannes"
}, {
"geometry": {
"type": "Point",
"coordinates": [7.267, 43.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Nice",
"city": "Nice"
},
"id": "Nice"
}, {
"geometry": {
"type": "Point",
"coordinates": [7.4, 43.733]
},
"type": "Feature",
"properties": {
"wikipedia": "Monaco",
"city": "Monaco"
},
"id": "Monaco"
}, {
"geometry": {
"type": "Point",
"coordinates": [7.45, 46.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Bern",
"city": "Bern"
},
"id": "Bern"
}, {
"geometry": {
"type": "Point",
"coordinates": [7.483, 9.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Abuja",
"city": "Abuja"
},
"id": "Abuja"
}, {
"geometry": {
"type": "Point",
"coordinates": [7.5, 6.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Enugu",
"city": "Enugu"
},
"id": "Enugu"
}, {
"geometry": {
"type": "Point",
"coordinates": [7.7, 45.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Turin",
"city": "Turin"
},
"id": "Turin"
}, {
"geometry": {
"type": "Point",
"coordinates": [7.75, 48.583]
},
"type": "Feature",
"properties": {
"wikipedia": "Strasbourg",
"city": "Strasbourg"
},
"id": "Strasbourg"
}, {
"geometry": {
"type": "Point",
"coordinates": [8.517, 12]
},
"type": "Feature",
"properties": {
"wikipedia": "Kano",
"city": "Kano"
},
"id": "Kano"
}, {
"geometry": {
"type": "Point",
"coordinates": [8.55, 47.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Z%C3%BCrich",
"city": "Z%C3%BCrich"
},
"id": "Z%C3%BCrich"
}, {
"geometry": {
"type": "Point",
"coordinates": [8.683, 50.1]
},
"type": "Feature",
"properties": {
"wikipedia": "Frankfurt",
"city": "Frankfurt"
},
"id": "Frankfurt"
}, {
"geometry": {
"type": "Point",
"coordinates": [8.767, 3.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Malabo",
"city": "Malabo"
},
"id": "Malabo"
}, {
"geometry": {
"type": "Point",
"coordinates": [9.167, 48.767]
},
"type": "Feature",
"properties": {
"wikipedia": "Stuttgart",
"city": "Stuttgart"
},
"id": "Stuttgart"
}, {
"geometry": {
"type": "Point",
"coordinates": [9.183, 45.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Milan",
"city": "Milan"
},
"id": "Milan"
}, {
"geometry": {
"type": "Point",
"coordinates": [9.45, 0.383]
},
"type": "Feature",
"properties": {
"wikipedia": "Libreville",
"city": "Libreville"
},
"id": "Libreville"
}, {
"geometry": {
"type": "Point",
"coordinates": [9.517, 47.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Vaduz",
"city": "Vaduz"
},
"id": "Vaduz"
}, {
"geometry": {
"type": "Point",
"coordinates": [9.7, 4.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Douala",
"city": "Douala"
},
"id": "Douala"
}, {
"geometry": {
"type": "Point",
"coordinates": [9.717, 52.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Hanover",
"city": "Hanover"
},
"id": "Hanover"
}, {
"geometry": {
"type": "Point",
"coordinates": [9.983, 53.583]
},
"type": "Feature",
"properties": {
"wikipedia": "Hamburg",
"city": "Hamburg"
},
"id": "Hamburg"
}, {
"geometry": {
"type": "Point",
"coordinates": [10.167, 36.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Tunis",
"city": "Tunis"
},
"id": "Tunis"
}, {
"geometry": {
"type": "Point",
"coordinates": [10.2, 56.15]
},
"type": "Feature",
"properties": {
"wikipedia": "Aarhus",
"city": "Aarhus"
},
"id": "Aarhus"
}, {
"geometry": {
"type": "Point",
"coordinates": [10.75, 59.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Oslo",
"city": "Oslo"
},
"id": "Oslo"
}, {
"geometry": {
"type": "Point",
"coordinates": [11.383, 47.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Innsbruck",
"city": "Innsbruck"
},
"id": "Innsbruck"
}, {
"geometry": {
"type": "Point",
"coordinates": [11.517, 3.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Yaound%C3%A9",
"city": "Yaound%C3%A9"
},
"id": "Yaound%C3%A9"
}, {
"geometry": {
"type": "Point",
"coordinates": [11.567, 48.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Munich",
"city": "Munich"
},
"id": "Munich"
}, {
"geometry": {
"type": "Point",
"coordinates": [11.967, 57.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Gothenburg",
"city": "Gothenburg"
},
"id": "Gothenburg"
}, {
"geometry": {
"type": "Point",
"coordinates": [12.383, 51.333]
},
"type": "Feature",
"properties": {
"wikipedia": "Leipzig",
"city": "Leipzig"
},
"id": "Leipzig"
}, {
"geometry": {
"type": "Point",
"coordinates": [12.433, 43.933]
},
"type": "Feature",
"properties": {
"wikipedia": "City_of_San_Marino",
"city": "City of San Marino"
},
"id": "City of San Marino"
}, {
"geometry": {
"type": "Point",
"coordinates": [12.45, 41.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Vatican_City",
"city": "Vatican City"
},
"id": "Vatican City"
}, {
"geometry": {
"type": "Point",
"coordinates": [12.5, 41.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Rome",
"city": "Rome"
},
"id": "Rome"
}, {
"geometry": {
"type": "Point",
"coordinates": [12.567, 55.667]
},
"type": "Feature",
"properties": {
"wikipedia": "Copenhagen",
"city": "Copenhagen"
},
"id": "Copenhagen"
}, {
"geometry": {
"type": "Point",
"coordinates": [13.033, 55.583]
},
"type": "Feature",
"properties": {
"wikipedia": "Malm%C3%B6",
"city": "Malm%C3%B6"
},
"id": "Malm%C3%B6"
}, {
"geometry": {
"type": "Point",
"coordinates": [13.033, 47.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Salzburg",
"city": "Salzburg"
},
"id": "Salzburg"
}, {
"geometry": {
"type": "Point",
"coordinates": [13.183, 32.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Tripoli",
"city": "Tripoli"
},
"id": "Tripoli"
}, {
"geometry": {
"type": "Point",
"coordinates": [13.233, -8.833]
},
"type": "Feature",
"properties": {
"wikipedia": "Luanda",
"city": "Luanda"
},
"id": "Luanda"
}, {
"geometry": {
"type": "Point",
"coordinates": [13.417, 52.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Berlin",
"city": "Berlin"
},
"id": "Berlin"
}, {
"geometry": {
"type": "Point",
"coordinates": [13.733, 51.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Dresden",
"city": "Dresden"
},
"id": "Dresden"
}, {
"geometry": {
"type": "Point",
"coordinates": [14.25, 40.833]
},
"type": "Feature",
"properties": {
"wikipedia": "Naples",
"city": "Naples"
},
"id": "Naples"
}, {
"geometry": {
"type": "Point",
"coordinates": [14.283, 48.3]
},
"type": "Feature",
"properties": {
"wikipedia": "Linz",
"city": "Linz"
},
"id": "Linz"
}, {
"geometry": {
"type": "Point",
"coordinates": [14.417, 50.083]
},
"type": "Feature",
"properties": {
"wikipedia": "Prague",
"city": "Prague"
},
"id": "Prague"
}, {
"geometry": {
"type": "Point",
"coordinates": [14.433, 27.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Sabha,_Libya",
"city": "Sabha"
},
"id": "Sabha"
}, {
"geometry": {
"type": "Point",
"coordinates": [14.45, 35.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Birkirkara",
"city": "Birkirkara"
},
"id": "Birkirkara"
}, {
"geometry": {
"type": "Point",
"coordinates": [14.5, 46.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Ljubljana",
"city": "Ljubljana"
},
"id": "Ljubljana"
}, {
"geometry": {
"type": "Point",
"coordinates": [14.5, 35.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Valletta",
"city": "Valletta"
},
"id": "Valletta"
}, {
"geometry": {
"type": "Point",
"coordinates": [15.05, 12.1]
},
"type": "Feature",
"properties": {
"wikipedia": "N%27Djamena",
"city": "N%27Djamena"
},
"id": "N%27Djamena"
}, {
"geometry": {
"type": "Point",
"coordinates": [15.283, -4.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Brazzaville",
"city": "Brazzaville"
},
"id": "Brazzaville"
}, {
"geometry": {
"type": "Point",
"coordinates": [15.317, -4.317]
},
"type": "Feature",
"properties": {
"wikipedia": "Kinshasa",
"city": "Kinshasa"
},
"id": "Kinshasa"
}, {
"geometry": {
"type": "Point",
"coordinates": [15.433, 47.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Graz",
"city": "Graz"
},
"id": "Graz"
}, {
"geometry": {
"type": "Point",
"coordinates": [15.55, 78.217]
},
"type": "Feature",
"properties": {
"wikipedia": "Longyearbyen",
"city": "Longyearbyen"
},
"id": "Longyearbyen"
}, {
"geometry": {
"type": "Point",
"coordinates": [15.983, 45.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Zagreb",
"city": "Zagreb"
},
"id": "Zagreb"
}, {
"geometry": {
"type": "Point",
"coordinates": [16.367, 48.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Vienna",
"city": "Vienna"
},
"id": "Vienna"
}, {
"geometry": {
"type": "Point",
"coordinates": [16.433, 43.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Split_(city)",
"city": "Split (city)"
},
"id": "Split (city)"
}, {
"geometry": {
"type": "Point",
"coordinates": [17.1, 48.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Bratislava",
"city": "Bratislava"
},
"id": "Bratislava"
}, {
"geometry": {
"type": "Point",
"coordinates": [18.067, 59.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Stockholm",
"city": "Stockholm"
},
"id": "Stockholm"
}, {
"geometry": {
"type": "Point",
"coordinates": [18.35, 43.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Sarajevo",
"city": "Sarajevo"
},
"id": "Sarajevo"
}, {
"geometry": {
"type": "Point",
"coordinates": [18.417, -33.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Cape_Town",
"city": "Cape Town"
},
"id": "Cape Town"
}, {
"geometry": {
"type": "Point",
"coordinates": [18.583, 4.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Bangui",
"city": "Bangui"
},
"id": "Bangui"
}, {
"geometry": {
"type": "Point",
"coordinates": [18.667, 54.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Gda%C5%84sk",
"city": "Gda%C5%84sk"
},
"id": "Gda%C5%84sk"
}, {
"geometry": {
"type": "Point",
"coordinates": [19.05, 47.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Budapest",
"city": "Budapest"
},
"id": "Budapest"
}, {
"geometry": {
"type": "Point",
"coordinates": [19.267, 42.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Podgorica",
"city": "Podgorica"
},
"id": "Podgorica"
}, {
"geometry": {
"type": "Point",
"coordinates": [19.817, 41.317]
},
"type": "Feature",
"properties": {
"wikipedia": "Tirana",
"city": "Tirana"
},
"id": "Tirana"
}, {
"geometry": {
"type": "Point",
"coordinates": [19.933, 50.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Krak%C3%B3w",
"city": "Krak%C3%B3w"
},
"id": "Krak%C3%B3w"
}, {
"geometry": {
"type": "Point",
"coordinates": [20.45, 44.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Belgrade",
"city": "Belgrade"
},
"id": "Belgrade"
}, {
"geometry": {
"type": "Point",
"coordinates": [20.517, 54.717]
},
"type": "Feature",
"properties": {
"wikipedia": "Kaliningrad",
"city": "Kaliningrad"
},
"id": "Kaliningrad"
}, {
"geometry": {
"type": "Point",
"coordinates": [21, 52.233]
},
"type": "Feature",
"properties": {
"wikipedia": "Warsaw",
"city": "Warsaw"
},
"id": "Warsaw"
}, {
"geometry": {
"type": "Point",
"coordinates": [21.167, 42.667]
},
"type": "Feature",
"properties": {
"wikipedia": "Pristina",
"city": "Pristina"
},
"id": "Pristina"
}, {
"geometry": {
"type": "Point",
"coordinates": [21.433, 42]
},
"type": "Feature",
"properties": {
"wikipedia": "Skopje",
"city": "Skopje"
},
"id": "Skopje"
}, {
"geometry": {
"type": "Point",
"coordinates": [22.95, 40.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Thessaloniki",
"city": "Thessaloniki"
},
"id": "Thessaloniki"
}, {
"geometry": {
"type": "Point",
"coordinates": [23.333, 42.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Sofia",
"city": "Sofia"
},
"id": "Sofia"
}, {
"geometry": {
"type": "Point",
"coordinates": [23.717, 37.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Athens",
"city": "Athens"
},
"id": "Athens"
}, {
"geometry": {
"type": "Point",
"coordinates": [23.75, 61.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Tampere",
"city": "Tampere"
},
"id": "Tampere"
}, {
"geometry": {
"type": "Point",
"coordinates": [24.017, 49.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Lviv",
"city": "Lviv"
},
"id": "Lviv"
}, {
"geometry": {
"type": "Point",
"coordinates": [24.133, 56.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Riga",
"city": "Riga"
},
"id": "Riga"
}, {
"geometry": {
"type": "Point",
"coordinates": [24.65, 60.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Espoo",
"city": "Espoo"
},
"id": "Espoo"
}, {
"geometry": {
"type": "Point",
"coordinates": [24.75, 59.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Tallinn",
"city": "Tallinn"
},
"id": "Tallinn"
}, {
"geometry": {
"type": "Point",
"coordinates": [24.933, 60.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Helsinki",
"city": "Helsinki"
},
"id": "Helsinki"
}, {
"geometry": {
"type": "Point",
"coordinates": [25.283, 54.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Vilnius",
"city": "Vilnius"
},
"id": "Vilnius"
}, {
"geometry": {
"type": "Point",
"coordinates": [25.6, -33.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Port_Elizabeth",
"city": "Port Elizabeth"
},
"id": "Port Elizabeth"
}, {
"geometry": {
"type": "Point",
"coordinates": [25.867, -17.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Livingstone,_Zambia",
"city": "Livingstone"
},
"id": "Livingstone"
}, {
"geometry": {
"type": "Point",
"coordinates": [25.9, -24.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Gaborone",
"city": "Gaborone"
},
"id": "Gaborone"
}, {
"geometry": {
"type": "Point",
"coordinates": [26.1, 44.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Bucharest",
"city": "Bucharest"
},
"id": "Bucharest"
}, {
"geometry": {
"type": "Point",
"coordinates": [26.217, -29.1]
},
"type": "Feature",
"properties": {
"wikipedia": "Bloemfontein",
"city": "Bloemfontein"
},
"id": "Bloemfontein"
}, {
"geometry": {
"type": "Point",
"coordinates": [26.717, 58.383]
},
"type": "Feature",
"properties": {
"wikipedia": "Tartu",
"city": "Tartu"
},
"id": "Tartu"
}, {
"geometry": {
"type": "Point",
"coordinates": [27.15, 38.433]
},
"type": "Feature",
"properties": {
"wikipedia": "%C4%B0zmir",
"city": "%C4%B0zmir"
},
"id": "%C4%B0zmir"
}, {
"geometry": {
"type": "Point",
"coordinates": [27.467, -11.667]
},
"type": "Feature",
"properties": {
"wikipedia": "Lubumbashi",
"city": "Lubumbashi"
},
"id": "Lubumbashi"
}, {
"geometry": {
"type": "Point",
"coordinates": [27.467, -29.3]
},
"type": "Feature",
"properties": {
"wikipedia": "Maseru",
"city": "Maseru"
},
"id": "Maseru"
}, {
"geometry": {
"type": "Point",
"coordinates": [27.5, -21.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Francistown",
"city": "Francistown"
},
"id": "Francistown"
}, {
"geometry": {
"type": "Point",
"coordinates": [27.567, 53.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Minsk",
"city": "Minsk"
},
"id": "Minsk"
}, {
"geometry": {
"type": "Point",
"coordinates": [28.033, -26.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Johannesburg",
"city": "Johannesburg"
},
"id": "Johannesburg"
}, {
"geometry": {
"type": "Point",
"coordinates": [28.183, -25.733]
},
"type": "Feature",
"properties": {
"wikipedia": "Pretoria",
"city": "Pretoria"
},
"id": "Pretoria"
}, {
"geometry": {
"type": "Point",
"coordinates": [28.283, -15.417]
},
"type": "Feature",
"properties": {
"wikipedia": "Lusaka",
"city": "Lusaka"
},
"id": "Lusaka"
}, {
"geometry": {
"type": "Point",
"coordinates": [28.633, -12.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Ndola",
"city": "Ndola"
},
"id": "Ndola"
}, {
"geometry": {
"type": "Point",
"coordinates": [28.567, -20.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Bulawayo",
"city": "Bulawayo"
},
"id": "Bulawayo"
}, {
"geometry": {
"type": "Point",
"coordinates": [28.867, 47]
},
"type": "Feature",
"properties": {
"wikipedia": "Chi%C5%9Fin%C4%83u",
"city": "Chi%C5%9Fin%C4%83u"
},
"id": "Chi%C5%9Fin%C4%83u"
}, {
"geometry": {
"type": "Point",
"coordinates": [28.967, 41]
},
"type": "Feature",
"properties": {
"wikipedia": "Istanbul",
"city": "Istanbul"
},
"id": "Istanbul"
}, {
"geometry": {
"type": "Point",
"coordinates": [29.067, 40.183]
},
"type": "Feature",
"properties": {
"wikipedia": "Bursa",
"city": "Bursa"
},
"id": "Bursa"
}, {
"geometry": {
"type": "Point",
"coordinates": [29.367, -3.383]
},
"type": "Feature",
"properties": {
"wikipedia": "Bujumbura",
"city": "Bujumbura"
},
"id": "Bujumbura"
}, {
"geometry": {
"type": "Point",
"coordinates": [29.633, 46.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Tiraspol",
"city": "Tiraspol"
},
"id": "Tiraspol"
}, {
"geometry": {
"type": "Point",
"coordinates": [29.917, 31.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Alexandria",
"city": "Alexandria"
},
"id": "Alexandria"
}, {
"geometry": {
"type": "Point",
"coordinates": [30.05, -1.933]
},
"type": "Feature",
"properties": {
"wikipedia": "Kigali",
"city": "Kigali"
},
"id": "Kigali"
}, {
"geometry": {
"type": "Point",
"coordinates": [30.333, 59.933]
},
"type": "Feature",
"properties": {
"wikipedia": "Saint_Petersburg",
"city": "Saint Petersburg"
},
"id": "Saint Petersburg"
}, {
"geometry": {
"type": "Point",
"coordinates": [30.517, 50.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Kiev",
"city": "Kiev"
},
"id": "Kiev"
}, {
"geometry": {
"type": "Point",
"coordinates": [30.733, 46.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Odessa",
"city": "Odessa"
},
"id": "Odessa"
}, {
"geometry": {
"type": "Point",
"coordinates": [31.05, -17.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Harare",
"city": "Harare"
},
"id": "Harare"
}, {
"geometry": {
"type": "Point",
"coordinates": [31.05, -29.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Durban",
"city": "Durban"
},
"id": "Durban"
}, {
"geometry": {
"type": "Point",
"coordinates": [31.133, -26.317]
},
"type": "Feature",
"properties": {
"wikipedia": "Mbabane",
"city": "Mbabane"
},
"id": "Mbabane"
}, {
"geometry": {
"type": "Point",
"coordinates": [31.2, -26.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Lobamba",
"city": "Lobamba"
},
"id": "Lobamba"
}, {
"geometry": {
"type": "Point",
"coordinates": [31.217, 30.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Cairo",
"city": "Cairo"
},
"id": "Cairo"
}, {
"geometry": {
"type": "Point",
"coordinates": [31.367, -26.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Manzini,_Swaziland",
"city": "Manzini"
},
"id": "Manzini"
}, {
"geometry": {
"type": "Point",
"coordinates": [32.283, 31.25]
},
"type": "Feature",
"properties": {
"wikipedia": "Port_Said",
"city": "Port Said"
},
"id": "Port Said"
}, {
"geometry": {
"type": "Point",
"coordinates": [32.483, 37.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Konya",
"city": "Konya"
},
"id": "Konya"
}, {
"geometry": {
"type": "Point",
"coordinates": [32.483, 15.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Omdurman",
"city": "Omdurman"
},
"id": "Omdurman"
}, {
"geometry": {
"type": "Point",
"coordinates": [32.533, 15.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Khartoum",
"city": "Khartoum"
},
"id": "Khartoum"
}, {
"geometry": {
"type": "Point",
"coordinates": [32.55, 29.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Suez",
"city": "Suez"
},
"id": "Suez"
}, {
"geometry": {
"type": "Point",
"coordinates": [32.583, -25.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Maputo",
"city": "Maputo"
},
"id": "Maputo"
}, {
"geometry": {
"type": "Point",
"coordinates": [32.65, 25.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Luxor",
"city": "Luxor"
},
"id": "Luxor"
}, {
"geometry": {
"type": "Point",
"coordinates": [32.833, 39.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Ankara",
"city": "Ankara"
},
"id": "Ankara"
}, {
"geometry": {
"type": "Point",
"coordinates": [32.9, -2.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Mwanza",
"city": "Mwanza"
},
"id": "Mwanza"
}, {
"geometry": {
"type": "Point",
"coordinates": [33.083, 68.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Murmansk",
"city": "Murmansk"
},
"id": "Murmansk"
}, {
"geometry": {
"type": "Point",
"coordinates": [33.35, 35.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Nicosia",
"city": "Nicosia"
},
"id": "Nicosia"
}, {
"geometry": {
"type": "Point",
"coordinates": [33.783, -13.983]
},
"type": "Feature",
"properties": {
"wikipedia": "Lilongwe",
"city": "Lilongwe"
},
"id": "Lilongwe"
}, {
"geometry": {
"type": "Point",
"coordinates": [34.1, 44.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Simferopol",
"city": "Simferopol"
},
"id": "Simferopol"
}, {
"geometry": {
"type": "Point",
"coordinates": [34.45, 31.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Gaza",
"city": "Gaza"
},
"id": "Gaza"
}, {
"geometry": {
"type": "Point",
"coordinates": [34.633, 36.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Mersin",
"city": "Mersin"
},
"id": "Mersin"
}, {
"geometry": {
"type": "Point",
"coordinates": [34.8, 32.083]
},
"type": "Feature",
"properties": {
"wikipedia": "Tel_Aviv",
"city": "Tel Aviv"
},
"id": "Tel Aviv"
}, {
"geometry": {
"type": "Point",
"coordinates": [35, -15.783]
},
"type": "Feature",
"properties": {
"wikipedia": "Blantyre,_Malawi",
"city": "Blantyre"
},
"id": "Blantyre"
}, {
"geometry": {
"type": "Point",
"coordinates": [35.217, 31.783]
},
"type": "Feature",
"properties": {
"wikipedia": "Jerusalem",
"city": "Jerusalem"
},
"id": "Jerusalem"
}, {
"geometry": {
"type": "Point",
"coordinates": [35.317, 37]
},
"type": "Feature",
"properties": {
"wikipedia": "Adana",
"city": "Adana"
},
"id": "Adana"
}, {
"geometry": {
"type": "Point",
"coordinates": [35.5, 33.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Beirut",
"city": "Beirut"
},
"id": "Beirut"
}, {
"geometry": {
"type": "Point",
"coordinates": [35.733, -6.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Dodoma",
"city": "Dodoma"
},
"id": "Dodoma"
}, {
"geometry": {
"type": "Point",
"coordinates": [35.933, 31.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Amman",
"city": "Amman"
},
"id": "Amman"
}, {
"geometry": {
"type": "Point",
"coordinates": [36.283, 33.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Damascus",
"city": "Damascus"
},
"id": "Damascus"
}, {
"geometry": {
"type": "Point",
"coordinates": [36.317, 49.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Kharkiv",
"city": "Kharkiv"
},
"id": "Kharkiv"
}, {
"geometry": {
"type": "Point",
"coordinates": [36.817, -1.283]
},
"type": "Feature",
"properties": {
"wikipedia": "Nairobi",
"city": "Nairobi"
},
"id": "Nairobi"
}, {
"geometry": {
"type": "Point",
"coordinates": [37.383, 37.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Gaziantep",
"city": "Gaziantep"
},
"id": "Gaziantep"
}, {
"geometry": {
"type": "Point",
"coordinates": [37.6, 55.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Moscow",
"city": "Moscow"
},
"id": "Moscow"
}, {
"geometry": {
"type": "Point",
"coordinates": [38.733, 9.017]
},
"type": "Feature",
"properties": {
"wikipedia": "Addis_Ababa",
"city": "Addis Ababa"
},
"id": "Addis Ababa"
}, {
"geometry": {
"type": "Point",
"coordinates": [38.933, 15.333]
},
"type": "Feature",
"properties": {
"wikipedia": "Asmara",
"city": "Asmara"
},
"id": "Asmara"
}, {
"geometry": {
"type": "Point",
"coordinates": [39.167, 21.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Jeddah",
"city": "Jeddah"
},
"id": "Jeddah"
}, {
"geometry": {
"type": "Point",
"coordinates": [39.2, -6.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Zanzibar_City",
"city": "Zanzibar City"
},
"id": "Zanzibar City"
}, {
"geometry": {
"type": "Point",
"coordinates": [39.267, -6.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Dar_es_Salaam",
"city": "Dar es Salaam"
},
"id": "Dar es Salaam"
}, {
"geometry": {
"type": "Point",
"coordinates": [39.6, 24.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Medina",
"city": "Medina"
},
"id": "Medina"
}, {
"geometry": {
"type": "Point",
"coordinates": [39.817, 21.417]
},
"type": "Feature",
"properties": {
"wikipedia": "Mecca",
"city": "Mecca"
},
"id": "Mecca"
}, {
"geometry": {
"type": "Point",
"coordinates": [41.017, 43]
},
"type": "Feature",
"properties": {
"wikipedia": "Sukhumi",
"city": "Sukhumi"
},
"id": "Sukhumi"
}, {
"geometry": {
"type": "Point",
"coordinates": [43.133, 11.583]
},
"type": "Feature",
"properties": {
"wikipedia": "Djibouti_(city)",
"city": "Djibouti (city)"
},
"id": "Djibouti (city)"
}, {
"geometry": {
"type": "Point",
"coordinates": [43.2, -11.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Moroni,_Comoros",
"city": "Moroni"
},
"id": "Moroni"
}, {
"geometry": {
"type": "Point",
"coordinates": [43.967, 42.233]
},
"type": "Feature",
"properties": {
"wikipedia": "Tskhinvali",
"city": "Tskhinvali"
},
"id": "Tskhinvali"
}, {
"geometry": {
"type": "Point",
"coordinates": [44.2, 15.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Sana%27a",
"city": "Sana%27a"
},
"id": "Sana%27a"
}, {
"geometry": {
"type": "Point",
"coordinates": [44.417, 33.317]
},
"type": "Feature",
"properties": {
"wikipedia": "Baghdad",
"city": "Baghdad"
},
"id": "Baghdad"
}, {
"geometry": {
"type": "Point",
"coordinates": [44, 56.333]
},
"type": "Feature",
"properties": {
"wikipedia": "Nizhny_Novgorod",
"city": "Nizhny Novgorod"
},
"id": "Nizhny Novgorod"
}, {
"geometry": {
"type": "Point",
"coordinates": [44, 9.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Hargeisa",
"city": "Hargeisa"
},
"id": "Hargeisa"
}, {
"geometry": {
"type": "Point",
"coordinates": [44.017, 36.333]
},
"type": "Feature",
"properties": {
"wikipedia": "Arbil",
"city": "Arbil"
},
"id": "Arbil"
}, {
"geometry": {
"type": "Point",
"coordinates": [44.517, 40.183]
},
"type": "Feature",
"properties": {
"wikipedia": "Yerevan",
"city": "Yerevan"
},
"id": "Yerevan"
}, {
"geometry": {
"type": "Point",
"coordinates": [44.783, 41.717]
},
"type": "Feature",
"properties": {
"wikipedia": "Tbilisi",
"city": "Tbilisi"
},
"id": "Tbilisi"
}, {
"geometry": {
"type": "Point",
"coordinates": [45.217, -12.783]
},
"type": "Feature",
"properties": {
"wikipedia": "Mamoudzou",
"city": "Mamoudzou"
},
"id": "Mamoudzou"
}, {
"geometry": {
"type": "Point",
"coordinates": [45.35, 2.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Mogadishu",
"city": "Mogadishu"
},
"id": "Mogadishu"
}, {
"geometry": {
"type": "Point",
"coordinates": [46.283, 38.083]
},
"type": "Feature",
"properties": {
"wikipedia": "Tabriz",
"city": "Tabriz"
},
"id": "Tabriz"
}, {
"geometry": {
"type": "Point",
"coordinates": [46.717, 24.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Riyadh",
"city": "Riyadh"
},
"id": "Riyadh"
}, {
"geometry": {
"type": "Point",
"coordinates": [46.75, 39.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Stepanakert",
"city": "Stepanakert"
},
"id": "Stepanakert"
}, {
"geometry": {
"type": "Point",
"coordinates": [47.517, -18.933]
},
"type": "Feature",
"properties": {
"wikipedia": "Antananarivo",
"city": "Antananarivo"
},
"id": "Antananarivo"
}, {
"geometry": {
"type": "Point",
"coordinates": [47.817, 30.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Basra",
"city": "Basra"
},
"id": "Basra"
}, {
"geometry": {
"type": "Point",
"coordinates": [47.967, 29.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Kuwait_City",
"city": "Kuwait City"
},
"id": "Kuwait City"
}, {
"geometry": {
"type": "Point",
"coordinates": [49.883, 40.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Baku",
"city": "Baku"
},
"id": "Baku"
}, {
"geometry": {
"type": "Point",
"coordinates": [50.117, 26.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Dammam",
"city": "Dammam"
},
"id": "Dammam"
}, {
"geometry": {
"type": "Point",
"coordinates": [50.167, 53.233]
},
"type": "Feature",
"properties": {
"wikipedia": "Samara,_Russia",
"city": "Samara"
},
"id": "Samara"
}, {
"geometry": {
"type": "Point",
"coordinates": [50.583, 26.217]
},
"type": "Feature",
"properties": {
"wikipedia": "Manama",
"city": "Manama"
},
"id": "Manama"
}, {
"geometry": {
"type": "Point",
"coordinates": [51.417, 35.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Tehran",
"city": "Tehran"
},
"id": "Tehran"
}, {
"geometry": {
"type": "Point",
"coordinates": [51.533, 25.283]
},
"type": "Feature",
"properties": {
"wikipedia": "Doha",
"city": "Doha"
},
"id": "Doha"
}, {
"geometry": {
"type": "Point",
"coordinates": [54.367, 24.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Abu_Dhabi",
"city": "Abu Dhabi"
},
"id": "Abu Dhabi"
}, {
"geometry": {
"type": "Point",
"coordinates": [55.3, 25.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Dubai",
"city": "Dubai"
},
"id": "Dubai"
}, {
"geometry": {
"type": "Point",
"coordinates": [55.45, -4.617]
},
"type": "Feature",
"properties": {
"wikipedia": "Victoria,_Seychelles",
"city": "Victoria"
},
"id": "Victoria"
}, {
"geometry": {
"type": "Point",
"coordinates": [55.45, -20.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Saint-Denis,_R%C3%A9union",
"city": "Saint-Denis"
},
"id": "Saint-Denis"
}, {
"geometry": {
"type": "Point",
"coordinates": [56.317, 58]
},
"type": "Feature",
"properties": {
"wikipedia": "Perm",
"city": "Perm"
},
"id": "Perm"
}, {
"geometry": {
"type": "Point",
"coordinates": [57.5, -20.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Port_Louis",
"city": "Port Louis"
},
"id": "Port Louis"
}, {
"geometry": {
"type": "Point",
"coordinates": [58.333, 37.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Ashgabat",
"city": "Ashgabat"
},
"id": "Ashgabat"
}, {
"geometry": {
"type": "Point",
"coordinates": [58.533, 23.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Muscat,_Oman",
"city": "Muscat"
},
"id": "Muscat"
}, {
"geometry": {
"type": "Point",
"coordinates": [59.6, 42.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Nukus",
"city": "Nukus"
},
"id": "Nukus"
}, {
"geometry": {
"type": "Point",
"coordinates": [59.6, 36.3]
},
"type": "Feature",
"properties": {
"wikipedia": "Mashhad",
"city": "Mashhad"
},
"id": "Mashhad"
}, {
"geometry": {
"type": "Point",
"coordinates": [60.583, 56.833]
},
"type": "Feature",
"properties": {
"wikipedia": "Yekaterinburg",
"city": "Yekaterinburg"
},
"id": "Yekaterinburg"
}, {
"geometry": {
"type": "Point",
"coordinates": [65.717, 31.617]
},
"type": "Feature",
"properties": {
"wikipedia": "Kandahar",
"city": "Kandahar"
},
"id": "Kandahar"
}, {
"geometry": {
"type": "Point",
"coordinates": [67, 24.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Karachi",
"city": "Karachi"
},
"id": "Karachi"
}, {
"geometry": {
"type": "Point",
"coordinates": [78.467, 17.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Hyderabad,_Andhra_Pradesh",
"city": "Hyderabad"
},
"id": "Hyderabad"
}, {
"geometry": {
"type": "Point",
"coordinates": [68.767, 38.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Dushanbe",
"city": "Dushanbe"
},
"id": "Dushanbe"
}, {
"geometry": {
"type": "Point",
"coordinates": [69.167, 34.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Kabul",
"city": "Kabul"
},
"id": "Kabul"
}, {
"geometry": {
"type": "Point",
"coordinates": [69.217, 41.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Tashkent",
"city": "Tashkent"
},
"id": "Tashkent"
}, {
"geometry": {
"type": "Point",
"coordinates": [71.45, 51.183]
},
"type": "Feature",
"properties": {
"wikipedia": "Astana",
"city": "Astana"
},
"id": "Astana"
}, {
"geometry": {
"type": "Point",
"coordinates": [71.45, 30.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Multan",
"city": "Multan"
},
"id": "Multan"
}, {
"geometry": {
"type": "Point",
"coordinates": [71.5, 34]
},
"type": "Feature",
"properties": {
"wikipedia": "Peshawar",
"city": "Peshawar"
},
"id": "Peshawar"
}, {
"geometry": {
"type": "Point",
"coordinates": [71.967, 41.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Namangan",
"city": "Namangan"
},
"id": "Namangan"
}, {
"geometry": {
"type": "Point",
"coordinates": [72.567, 23.017]
},
"type": "Feature",
"properties": {
"wikipedia": "Ahmedabad",
"city": "Ahmedabad"
},
"id": "Ahmedabad"
}, {
"geometry": {
"type": "Point",
"coordinates": [72.817, 18.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Mumbai",
"city": "Mumbai"
},
"id": "Mumbai"
}, {
"geometry": {
"type": "Point",
"coordinates": [72.817, 21.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Surat,_Gujarat",
"city": "Surat"
},
"id": "Surat"
}, {
"geometry": {
"type": "Point",
"coordinates": [72.983, 31.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Faisalabad",
"city": "Faisalabad"
},
"id": "Faisalabad"
}, {
"geometry": {
"type": "Point",
"coordinates": [73.033, 33.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Rawalpindi",
"city": "Rawalpindi"
},
"id": "Rawalpindi"
}, {
"geometry": {
"type": "Point",
"coordinates": [73.067, 33.717]
},
"type": "Feature",
"properties": {
"wikipedia": "Islamabad",
"city": "Islamabad"
},
"id": "Islamabad"
}, {
"geometry": {
"type": "Point",
"coordinates": [73.367, 54.983]
},
"type": "Feature",
"properties": {
"wikipedia": "Omsk",
"city": "Omsk"
},
"id": "Omsk"
}, {
"geometry": {
"type": "Point",
"coordinates": [73.5, 4.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Mal%C3%A9",
"city": "Mal%C3%A9"
},
"id": "Mal%C3%A9"
}, {
"geometry": {
"type": "Point",
"coordinates": [73.85, 18.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Pune",
"city": "Pune"
},
"id": "Pune"
}, {
"geometry": {
"type": "Point",
"coordinates": [74.333, 31.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Lahore",
"city": "Lahore"
},
"id": "Lahore"
}, {
"geometry": {
"type": "Point",
"coordinates": [74.6, 42.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Bishkek",
"city": "Bishkek"
},
"id": "Bishkek"
}, {
"geometry": {
"type": "Point",
"coordinates": [74.783, 34.083]
},
"type": "Feature",
"properties": {
"wikipedia": "Srinagar",
"city": "Srinagar"
},
"id": "Srinagar"
}, {
"geometry": {
"type": "Point",
"coordinates": [74.85, 31.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Amritsar",
"city": "Amritsar"
},
"id": "Amritsar"
}, {
"geometry": {
"type": "Point",
"coordinates": [75.817, 26.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Jaipur",
"city": "Jaipur"
},
"id": "Jaipur"
}, {
"geometry": {
"type": "Point",
"coordinates": [75.85, 30.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Ludhiana",
"city": "Ludhiana"
},
"id": "Ludhiana"
}, {
"geometry": {
"type": "Point",
"coordinates": [76.883, 43.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Almaty",
"city": "Almaty"
},
"id": "Almaty"
}, {
"geometry": {
"type": "Point",
"coordinates": [77.2, 28.617]
},
"type": "Feature",
"properties": {
"wikipedia": "New_Delhi",
"city": "New Delhi"
},
"id": "New Delhi"
}, {
"geometry": {
"type": "Point",
"coordinates": [77.567, 12.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Bangalore",
"city": "Bangalore"
},
"id": "Bangalore"
}, {
"geometry": {
"type": "Point",
"coordinates": [79.017, 21.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Nagpur",
"city": "Nagpur"
},
"id": "Nagpur"
}, {
"geometry": {
"type": "Point",
"coordinates": [79.867, 6.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Colombo",
"city": "Colombo"
},
"id": "Colombo"
}, {
"geometry": {
"type": "Point",
"coordinates": [79.883, 6.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Sri_Jayawardenapura-Kotte",
"city": "Sri Jayawardenapura-Kotte"
},
"id": "Sri Jayawardenapura-Kotte"
}, {
"geometry": {
"type": "Point",
"coordinates": [80.267, 13.083]
},
"type": "Feature",
"properties": {
"wikipedia": "Chennai",
"city": "Chennai"
},
"id": "Chennai"
}, {
"geometry": {
"type": "Point",
"coordinates": [80.333, 26.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Kanpur",
"city": "Kanpur"
},
"id": "Kanpur"
}, {
"geometry": {
"type": "Point",
"coordinates": [80.633, 7.283]
},
"type": "Feature",
"properties": {
"wikipedia": "Kandy",
"city": "Kandy"
},
"id": "Kandy"
}, {
"geometry": {
"type": "Point",
"coordinates": [80.917, 26.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Lucknow",
"city": "Lucknow"
},
"id": "Lucknow"
}, {
"geometry": {
"type": "Point",
"coordinates": [81.7, 7.717]
},
"type": "Feature",
"properties": {
"wikipedia": "Batticaloa",
"city": "Batticaloa"
},
"id": "Batticaloa"
}, {
"geometry": {
"type": "Point",
"coordinates": [82.933, 55.017]
},
"type": "Feature",
"properties": {
"wikipedia": "Novosibirsk",
"city": "Novosibirsk"
},
"id": "Novosibirsk"
}, {
"geometry": {
"type": "Point",
"coordinates": [85.133, 25.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Patna",
"city": "Patna"
},
"id": "Patna"
}, {
"geometry": {
"type": "Point",
"coordinates": [85.333, 27.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Kathmandu",
"city": "Kathmandu"
},
"id": "Kathmandu"
}, {
"geometry": {
"type": "Point",
"coordinates": [87.583, 43.8]
},
"type": "Feature",
"properties": {
"wikipedia": "%C3%9Cr%C3%BCmqi",
"city": "%C3%9Cr%C3%BCmqi"
},
"id": "%C3%9Cr%C3%BCmqi"
}, {
"geometry": {
"type": "Point",
"coordinates": [88.2, 69.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Norilsk",
"city": "Norilsk"
},
"id": "Norilsk"
}, {
"geometry": {
"type": "Point",
"coordinates": [88.367, 22.567]
},
"type": "Feature",
"properties": {
"wikipedia": "Kolkata",
"city": "Kolkata"
},
"id": "Kolkata"
}, {
"geometry": {
"type": "Point",
"coordinates": [88.617, 27.317]
},
"type": "Feature",
"properties": {
"wikipedia": "Gangtok",
"city": "Gangtok"
},
"id": "Gangtok"
}, {
"geometry": {
"type": "Point",
"coordinates": [88.867, 29.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Shigatse",
"city": "Shigatse"
},
"id": "Shigatse"
}, {
"geometry": {
"type": "Point",
"coordinates": [89.633, 27.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Thimphu",
"city": "Thimphu"
},
"id": "Thimphu"
}, {
"geometry": {
"type": "Point",
"coordinates": [90.367, 23.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Dhaka",
"city": "Dhaka"
},
"id": "Dhaka"
}, {
"geometry": {
"type": "Point",
"coordinates": [91.117, 29.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Lhasa",
"city": "Lhasa"
},
"id": "Lhasa"
}, {
"geometry": {
"type": "Point",
"coordinates": [91.2, 23.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Agartala",
"city": "Agartala"
},
"id": "Agartala"
}, {
"geometry": {
"type": "Point",
"coordinates": [91.767, 26.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Guwahati",
"city": "Guwahati"
},
"id": "Guwahati"
}, {
"geometry": {
"type": "Point",
"coordinates": [91.8, 22.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Chittagong",
"city": "Chittagong"
},
"id": "Chittagong"
}, {
"geometry": {
"type": "Point",
"coordinates": [91.883, 25.567]
},
"type": "Feature",
"properties": {
"wikipedia": "Shillong",
"city": "Shillong"
},
"id": "Shillong"
}, {
"geometry": {
"type": "Point",
"coordinates": [92.75, 11.667]
},
"type": "Feature",
"properties": {
"wikipedia": "Port_Blair",
"city": "Port Blair"
},
"id": "Port Blair"
}, {
"geometry": {
"type": "Point",
"coordinates": [94.9, 27.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Dibrugarh",
"city": "Dibrugarh"
},
"id": "Dibrugarh"
}, {
"geometry": {
"type": "Point",
"coordinates": [95.317, 5.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Banda_Aceh",
"city": "Banda Aceh"
},
"id": "Banda Aceh"
}, {
"geometry": {
"type": "Point",
"coordinates": [96.1, 19.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Naypyidaw",
"city": "Naypyidaw"
},
"id": "Naypyidaw"
}, {
"geometry": {
"type": "Point",
"coordinates": [96.167, 16.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Yangon",
"city": "Yangon"
},
"id": "Yangon"
}, {
"geometry": {
"type": "Point",
"coordinates": [98.667, 3.583]
},
"type": "Feature",
"properties": {
"wikipedia": "Medan",
"city": "Medan"
},
"id": "Medan"
}, {
"geometry": {
"type": "Point",
"coordinates": [98.4, 7.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Phuket_(city)",
"city": "Phuket (city)"
},
"id": "Phuket (city)"
}, {
"geometry": {
"type": "Point",
"coordinates": [98.983, 18.783]
},
"type": "Feature",
"properties": {
"wikipedia": "Chiang_Mai",
"city": "Chiang Mai"
},
"id": "Chiang Mai"
}, {
"geometry": {
"type": "Point",
"coordinates": [99.333, 9.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Surat_Thani",
"city": "Surat Thani"
},
"id": "Surat Thani"
}, {
"geometry": {
"type": "Point",
"coordinates": [100.35, -0.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Padang,_Indonesia",
"city": "Padang"
},
"id": "Padang"
}, {
"geometry": {
"type": "Point",
"coordinates": [100.367, 6.117]
},
"type": "Feature",
"properties": {
"wikipedia": "Alor_Star",
"city": "Alor Star"
},
"id": "Alor Star"
}, {
"geometry": {
"type": "Point",
"coordinates": [100.467, 7.017]
},
"type": "Feature",
"properties": {
"wikipedia": "Hat_Yai",
"city": "Hat Yai"
},
"id": "Hat Yai"
}, {
"geometry": {
"type": "Point",
"coordinates": [100.483, 13.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Bangkok",
"city": "Bangkok"
},
"id": "Bangkok"
}, {
"geometry": {
"type": "Point",
"coordinates": [100.867, 12.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Pattaya",
"city": "Pattaya"
},
"id": "Pattaya"
}, {
"geometry": {
"type": "Point",
"coordinates": [101.067, 4.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Ipoh",
"city": "Ipoh"
},
"id": "Ipoh"
}, {
"geometry": {
"type": "Point",
"coordinates": [101.45, 0.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Pekanbaru",
"city": "Pekanbaru"
},
"id": "Pekanbaru"
}, {
"geometry": {
"type": "Point",
"coordinates": [101.617, 56.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Bratsk",
"city": "Bratsk"
},
"id": "Bratsk"
}, {
"geometry": {
"type": "Point",
"coordinates": [101.683, 3.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Kuala_Lumpur",
"city": "Kuala Lumpur"
},
"id": "Kuala Lumpur"
}, {
"geometry": {
"type": "Point",
"coordinates": [101.767, 36.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Xining",
"city": "Xining"
},
"id": "Xining"
}, {
"geometry": {
"type": "Point",
"coordinates": [102.1, 14.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Nakhon_Ratchasima",
"city": "Nakhon Ratchasima"
},
"id": "Nakhon Ratchasima"
}, {
"geometry": {
"type": "Point",
"coordinates": [102.25, 6.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Kota_Bharu",
"city": "Kota Bharu"
},
"id": "Kota Bharu"
}, {
"geometry": {
"type": "Point",
"coordinates": [102.383, 2.183]
},
"type": "Feature",
"properties": {
"wikipedia": "Malacca_Town",
"city": "Malacca Town"
},
"id": "Malacca Town"
}, {
"geometry": {
"type": "Point",
"coordinates": [102.617, 17.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Vientiane",
"city": "Vientiane"
},
"id": "Vientiane"
}, {
"geometry": {
"type": "Point",
"coordinates": [102.683, 25.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Kunming",
"city": "Kunming"
},
"id": "Kunming"
}, {
"geometry": {
"type": "Point",
"coordinates": [102.75, 17.417]
},
"type": "Feature",
"properties": {
"wikipedia": "Udon_Thani",
"city": "Udon Thani"
},
"id": "Udon Thani"
}, {
"geometry": {
"type": "Point",
"coordinates": [103.733, 1.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Johor_Bahru",
"city": "Johor Bahru"
},
"id": "Johor Bahru"
}, {
"geometry": {
"type": "Point",
"coordinates": [103.8, 36.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Lanzhou",
"city": "Lanzhou"
},
"id": "Lanzhou"
}, {
"geometry": {
"type": "Point",
"coordinates": [103.8, 1.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Singapore",
"city": "Singapore"
},
"id": "Singapore"
}, {
"geometry": {
"type": "Point",
"coordinates": [103.85, 13.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Siem_Reap",
"city": "Siem Reap"
},
"id": "Siem Reap"
}, {
"geometry": {
"type": "Point",
"coordinates": [104.067, 30.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Chengdu",
"city": "Chengdu"
},
"id": "Chengdu"
}, {
"geometry": {
"type": "Point",
"coordinates": [104.75, -2.983]
},
"type": "Feature",
"properties": {
"wikipedia": "Palembang",
"city": "Palembang"
},
"id": "Palembang"
}, {
"geometry": {
"type": "Point",
"coordinates": [104.917, 11.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Phnom_Penh",
"city": "Phnom Penh"
},
"id": "Phnom Penh"
}, {
"geometry": {
"type": "Point",
"coordinates": [105.85, 21.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Hanoi",
"city": "Hanoi"
},
"id": "Hanoi"
}, {
"geometry": {
"type": "Point",
"coordinates": [106.5, 29.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Chongqing",
"city": "Chongqing"
},
"id": "Chongqing"
}, {
"geometry": {
"type": "Point",
"coordinates": [106.683, 20.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Hai_Phong",
"city": "Hai Phong"
},
"id": "Hai Phong"
}, {
"geometry": {
"type": "Point",
"coordinates": [106.683, 10.767]
},
"type": "Feature",
"properties": {
"wikipedia": "Ho_Chi_Minh_City",
"city": "Ho Chi Minh City"
},
"id": "Ho Chi Minh City"
}, {
"geometry": {
"type": "Point",
"coordinates": [106.75, -6.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Jakarta",
"city": "Jakarta"
},
"id": "Jakarta"
}, {
"geometry": {
"type": "Point",
"coordinates": [106.8, -6.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Bogor",
"city": "Bogor"
},
"id": "Bogor"
}, {
"geometry": {
"type": "Point",
"coordinates": [106.917, 47.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Ulan_Bator",
"city": "Ulan Bator"
},
"id": "Ulan Bator"
}, {
"geometry": {
"type": "Point",
"coordinates": [107.567, -6.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Bandung",
"city": "Bandung"
},
"id": "Bandung"
}, {
"geometry": {
"type": "Point",
"coordinates": [107.6, 16.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Hu%E1%BA%BF",
"city": "Hu%E1%BA%BF"
},
"id": "Hu%E1%BA%BF"
}, {
"geometry": {
"type": "Point",
"coordinates": [108.233, 16.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Da_Nang",
"city": "Da Nang"
},
"id": "Da Nang"
}, {
"geometry": {
"type": "Point",
"coordinates": [108.317, 22.817]
},
"type": "Feature",
"properties": {
"wikipedia": "Nanning",
"city": "Nanning"
},
"id": "Nanning"
}, {
"geometry": {
"type": "Point",
"coordinates": [108.9, 34.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Xi%27an",
"city": "Xi%27an"
},
"id": "Xi%27an"
}, {
"geometry": {
"type": "Point",
"coordinates": [109.333, 0]
},
"type": "Feature",
"properties": {
"wikipedia": "Pontianak,_Indonesia",
"city": "Pontianak"
},
"id": "Pontianak"
}, {
"geometry": {
"type": "Point",
"coordinates": [110.35, 1.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Kuching",
"city": "Kuching"
},
"id": "Kuching"
}, {
"geometry": {
"type": "Point",
"coordinates": [110.367, -7.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Yogyakarta_(city)",
"city": "Yogyakarta (city)"
},
"id": "Yogyakarta (city)"
}, {
"geometry": {
"type": "Point",
"coordinates": [110.417, -6.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Semarang",
"city": "Semarang"
},
"id": "Semarang"
}, {
"geometry": {
"type": "Point",
"coordinates": [112.55, 37.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Taiyuan",
"city": "Taiyuan"
},
"id": "Taiyuan"
}, {
"geometry": {
"type": "Point",
"coordinates": [112.617, -7.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Malang",
"city": "Malang"
},
"id": "Malang"
}, {
"geometry": {
"type": "Point",
"coordinates": [112.733, -7.233]
},
"type": "Feature",
"properties": {
"wikipedia": "Surabaya",
"city": "Surabaya"
},
"id": "Surabaya"
}, {
"geometry": {
"type": "Point",
"coordinates": [113.267, 23.1]
},
"type": "Feature",
"properties": {
"wikipedia": "Guangzhou",
"city": "Guangzhou"
},
"id": "Guangzhou"
}, {
"geometry": {
"type": "Point",
"coordinates": [113.55, 22.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Macau",
"city": "Macau"
},
"id": "Macau"
}, {
"geometry": {
"type": "Point",
"coordinates": [113.633, 34.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Zhengzhou",
"city": "Zhengzhou"
},
"id": "Zhengzhou"
}, {
"geometry": {
"type": "Point",
"coordinates": [113.717, 23.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Dongguan",
"city": "Dongguan"
},
"id": "Dongguan"
}, {
"geometry": {
"type": "Point",
"coordinates": [113.967, 4.383]
},
"type": "Feature",
"properties": {
"wikipedia": "Miri",
"city": "Miri"
},
"id": "Miri"
}, {
"geometry": {
"type": "Point",
"coordinates": [114.1, 22.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Shenzhen",
"city": "Shenzhen"
},
"id": "Shenzhen"
}, {
"geometry": {
"type": "Point",
"coordinates": [114.2, 22.3]
},
"type": "Feature",
"properties": {
"wikipedia": "Hong Kong",
"city": "Hong Kong"
},
"id": "Hong Kong"
}, {
"geometry": {
"type": "Point",
"coordinates": [114.267, 30.567]
},
"type": "Feature",
"properties": {
"wikipedia": "Wuhan",
"city": "Wuhan"
},
"id": "Wuhan"
}, {
"geometry": {
"type": "Point",
"coordinates": [114.483, 36.6]
},
"type": "Feature",
"properties": {
"wikipedia": "Handan",
"city": "Handan"
},
"id": "Handan"
}, {
"geometry": {
"type": "Point",
"coordinates": [114.5, 38.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Shijiazhuang",
"city": "Shijiazhuang"
},
"id": "Shijiazhuang"
}, {
"geometry": {
"type": "Point",
"coordinates": [114.933, 4.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Bandar_Seri_Begawan",
"city": "Bandar Seri Begawan"
},
"id": "Bandar Seri Begawan"
}, {
"geometry": {
"type": "Point",
"coordinates": [115.217, -8.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Denpasar",
"city": "Denpasar"
},
"id": "Denpasar"
}, {
"geometry": {
"type": "Point",
"coordinates": [115.717, -32.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Mandurah",
"city": "Mandurah"
},
"id": "Mandurah"
}, {
"geometry": {
"type": "Point",
"coordinates": [115.85, -31.95]
},
"type": "Feature",
"properties": {
"wikipedia": "Perth,_Western_Australia",
"city": "Perth"
},
"id": "Perth"
}, {
"geometry": {
"type": "Point",
"coordinates": [116.083, 5.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Kota_Kinabalu",
"city": "Kota Kinabalu"
},
"id": "Kota Kinabalu"
}, {
"geometry": {
"type": "Point",
"coordinates": [116.4, 39.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Beijing",
"city": "Beijing"
},
"id": "Beijing"
}, {
"geometry": {
"type": "Point",
"coordinates": [116.817, -1.25]
},
"type": "Feature",
"properties": {
"wikipedia": "Balikpapan",
"city": "Balikpapan"
},
"id": "Balikpapan"
}, {
"geometry": {
"type": "Point",
"coordinates": [116.983, 36.667]
},
"type": "Feature",
"properties": {
"wikipedia": "Jinan",
"city": "Jinan"
},
"id": "Jinan"
}, {
"geometry": {
"type": "Point",
"coordinates": [117.183, 39.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Tianjin",
"city": "Tianjin"
},
"id": "Tianjin"
}, {
"geometry": {
"type": "Point",
"coordinates": [118.6, -20.3]
},
"type": "Feature",
"properties": {
"wikipedia": "Port_Hedland,_Western_Australia",
"city": "Port Hedland"
},
"id": "Port Hedland"
}, {
"geometry": {
"type": "Point",
"coordinates": [118.767, 32.05]
},
"type": "Feature",
"properties": {
"wikipedia": "Nanjing",
"city": "Nanjing"
},
"id": "Nanjing"
}, {
"geometry": {
"type": "Point",
"coordinates": [119.417, -5.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Makassar",
"city": "Makassar"
},
"id": "Makassar"
}, {
"geometry": {
"type": "Point",
"coordinates": [120.167, 30.25]
},
"type": "Feature",
"properties": {
"wikipedia": "Hangzhou",
"city": "Hangzhou"
},
"id": "Hangzhou"
}, {
"geometry": {
"type": "Point",
"coordinates": [120.267, 22.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Kaohsiung",
"city": "Kaohsiung"
},
"id": "Kaohsiung"
}, {
"geometry": {
"type": "Point",
"coordinates": [120.333, 36.083]
},
"type": "Feature",
"properties": {
"wikipedia": "Qingdao",
"city": "Qingdao"
},
"id": "Qingdao"
}, {
"geometry": {
"type": "Point",
"coordinates": [120.667, 24.15]
},
"type": "Feature",
"properties": {
"wikipedia": "Taichung",
"city": "Taichung"
},
"id": "Taichung"
}, {
"geometry": {
"type": "Point",
"coordinates": [120.967, 14.583]
},
"type": "Feature",
"properties": {
"wikipedia": "Manila",
"city": "Manila"
},
"id": "Manila"
}, {
"geometry": {
"type": "Point",
"coordinates": [121.033, 14.633]
},
"type": "Feature",
"properties": {
"wikipedia": "Quezon_City",
"city": "Quezon City"
},
"id": "Quezon City"
}, {
"geometry": {
"type": "Point",
"coordinates": [121.033, 14.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Makati_City",
"city": "Makati City"
},
"id": "Makati City"
}, {
"geometry": {
"type": "Point",
"coordinates": [121.5, 31.2]
},
"type": "Feature",
"properties": {
"wikipedia": "Shanghai",
"city": "Shanghai"
},
"id": "Shanghai"
}, {
"geometry": {
"type": "Point",
"coordinates": [121.633, 25.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Taipei",
"city": "Taipei"
},
"id": "Taipei"
}, {
"geometry": {
"type": "Point",
"coordinates": [121.767, 39.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Dalian",
"city": "Dalian"
},
"id": "Dalian"
}, {
"geometry": {
"type": "Point",
"coordinates": [122.55, 10.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Iloilo_City",
"city": "Iloilo City"
},
"id": "Iloilo City"
}, {
"geometry": {
"type": "Point",
"coordinates": [122.067, 6.9]
},
"type": "Feature",
"properties": {
"wikipedia": "Zamboanga_City",
"city": "Zamboanga City"
},
"id": "Zamboanga City"
}, {
"geometry": {
"type": "Point",
"coordinates": [123.45, 41.783]
},
"type": "Feature",
"properties": {
"wikipedia": "Shenyang",
"city": "Shenyang"
},
"id": "Shenyang"
}, {
"geometry": {
"type": "Point",
"coordinates": [123.85, 9.65]
},
"type": "Feature",
"properties": {
"wikipedia": "Tagbilaran",
"city": "Tagbilaran"
},
"id": "Tagbilaran"
}, {
"geometry": {
"type": "Point",
"coordinates": [123.9, 10.283]
},
"type": "Feature",
"properties": {
"wikipedia": "Cebu_City",
"city": "Cebu City"
},
"id": "Cebu City"
}, {
"geometry": {
"type": "Point",
"coordinates": [125.317, 43.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Changchun",
"city": "Changchun"
},
"id": "Changchun"
}, {
"geometry": {
"type": "Point",
"coordinates": [125.583, -8.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Dili",
"city": "Dili"
},
"id": "Dili"
}, {
"geometry": {
"type": "Point",
"coordinates": [125.75, 39.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Pyongyang",
"city": "Pyongyang"
},
"id": "Pyongyang"
}, {
"geometry": {
"type": "Point",
"coordinates": [126, 7.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Davao_City",
"city": "Davao City"
},
"id": "Davao City"
}, {
"geometry": {
"type": "Point",
"coordinates": [126.55, 37.967]
},
"type": "Feature",
"properties": {
"wikipedia": "Kaesong",
"city": "Kaesong"
},
"id": "Kaesong"
}, {
"geometry": {
"type": "Point",
"coordinates": [126.633, 45.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Harbin",
"city": "Harbin"
},
"id": "Harbin"
}, {
"geometry": {
"type": "Point",
"coordinates": [126.633, 37.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Incheon",
"city": "Incheon"
},
"id": "Incheon"
}, {
"geometry": {
"type": "Point",
"coordinates": [126.983, 37.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Seoul",
"city": "Seoul"
},
"id": "Seoul"
}, {
"geometry": {
"type": "Point",
"coordinates": [127.433, 39.15]
},
"type": "Feature",
"properties": {
"wikipedia": "Wonsan",
"city": "Wonsan"
},
"id": "Wonsan"
}, {
"geometry": {
"type": "Point",
"coordinates": [127.8, 26.333]
},
"type": "Feature",
"properties": {
"wikipedia": "Okinawa,_Okinawa",
"city": "Okinawa"
},
"id": "Okinawa"
}, {
"geometry": {
"type": "Point",
"coordinates": [128.167, -3.7]
},
"type": "Feature",
"properties": {
"wikipedia": "Ambon,_Maluku",
"city": "Ambon"
},
"id": "Ambon"
}, {
"geometry": {
"type": "Point",
"coordinates": [128.6, 35.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Daegu",
"city": "Daegu"
},
"id": "Daegu"
}, {
"geometry": {
"type": "Point",
"coordinates": [129.033, 35.1]
},
"type": "Feature",
"properties": {
"wikipedia": "Busan",
"city": "Busan"
},
"id": "Busan"
}, {
"geometry": {
"type": "Point",
"coordinates": [129.733, 62.033]
},
"type": "Feature",
"properties": {
"wikipedia": "Yakutsk",
"city": "Yakutsk"
},
"id": "Yakutsk"
}, {
"geometry": {
"type": "Point",
"coordinates": [129.783, 41.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Chongjin",
"city": "Chongjin"
},
"id": "Chongjin"
}, {
"geometry": {
"type": "Point",
"coordinates": [130.4, 33.583]
},
"type": "Feature",
"properties": {
"wikipedia": "Fukuoka",
"city": "Fukuoka"
},
"id": "Fukuoka"
}, {
"geometry": {
"type": "Point",
"coordinates": [130.833, -12.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Darwin,_Northern_Territory",
"city": "Darwin"
},
"id": "Darwin"
}, {
"geometry": {
"type": "Point",
"coordinates": [131.9, 43.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Vladivostok",
"city": "Vladivostok"
},
"id": "Vladivostok"
}, {
"geometry": {
"type": "Point",
"coordinates": [132.45, 34.383]
},
"type": "Feature",
"properties": {
"wikipedia": "Hiroshima",
"city": "Hiroshima"
},
"id": "Hiroshima"
}, {
"geometry": {
"type": "Point",
"coordinates": [134.467, 7.35]
},
"type": "Feature",
"properties": {
"wikipedia": "Koror",
"city": "Koror"
},
"id": "Koror"
}, {
"geometry": {
"type": "Point",
"coordinates": [134.617, 7.5]
},
"type": "Feature",
"properties": {
"wikipedia": "Melekeok",
"city": "Melekeok"
},
"id": "Melekeok"
}, {
"geometry": {
"type": "Point",
"coordinates": [135.2, 34.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Kobe",
"city": "Kobe"
},
"id": "Kobe"
}, {
"geometry": {
"type": "Point",
"coordinates": [135.5, 34.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Osaka",
"city": "Osaka"
},
"id": "Osaka"
}, {
"geometry": {
"type": "Point",
"coordinates": [135.767, 35.017]
},
"type": "Feature",
"properties": {
"wikipedia": "Kyoto",
"city": "Kyoto"
},
"id": "Kyoto"
}, {
"geometry": {
"type": "Point",
"coordinates": [136.9, 35.183]
},
"type": "Feature",
"properties": {
"wikipedia": "Nagoya",
"city": "Nagoya"
},
"id": "Nagoya"
}, {
"geometry": {
"type": "Point",
"coordinates": [138.6, -34.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Adelaide",
"city": "Adelaide"
},
"id": "Adelaide"
}, {
"geometry": {
"type": "Point",
"coordinates": [139.633, 35.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Yokohama",
"city": "Yokohama"
},
"id": "Yokohama"
}, {
"geometry": {
"type": "Point",
"coordinates": [139.7, 35.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Kawasaki,_Kanagawa",
"city": "Kawasaki"
},
"id": "Kawasaki"
}, {
"geometry": {
"type": "Point",
"coordinates": [139.767, 35.683]
},
"type": "Feature",
"properties": {
"wikipedia": "Tokyo",
"city": "Tokyo"
},
"id": "Tokyo"
}, {
"geometry": {
"type": "Point",
"coordinates": [140.717, -2.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Jayapura",
"city": "Jayapura"
},
"id": "Jayapura"
}, {
"geometry": {
"type": "Point",
"coordinates": [141.35, 43.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Sapporo",
"city": "Sapporo"
},
"id": "Sapporo"
}, {
"geometry": {
"type": "Point",
"coordinates": [144.35, -38.15]
},
"type": "Feature",
"properties": {
"wikipedia": "Geelong",
"city": "Geelong"
},
"id": "Geelong"
}, {
"geometry": {
"type": "Point",
"coordinates": [144.75, 13.483]
},
"type": "Feature",
"properties": {
"wikipedia": "Hag%C3%A5t%C3%B1a,_Guam",
"city": "Hag%C3%A5t%C3%B1a"
},
"id": "Hag%C3%A5t%C3%B1a"
}, {
"geometry": {
"type": "Point",
"coordinates": [144.833, 13.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Dededo,_Guam",
"city": "Dededo"
},
"id": "Dededo"
}, {
"geometry": {
"type": "Point",
"coordinates": [144.95, -37.8]
},
"type": "Feature",
"properties": {
"wikipedia": "Melbourne",
"city": "Melbourne"
},
"id": "Melbourne"
}, {
"geometry": {
"type": "Point",
"coordinates": [145.75, 15.183]
},
"type": "Feature",
"properties": {
"wikipedia": "Saipan",
"city": "Saipan"
},
"id": "Saipan"
}, {
"geometry": {
"type": "Point",
"coordinates": [145.767, -16.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Cairns",
"city": "Cairns"
},
"id": "Cairns"
}, {
"geometry": {
"type": "Point",
"coordinates": [146.817, -19.25]
},
"type": "Feature",
"properties": {
"wikipedia": "Townsville",
"city": "Townsville"
},
"id": "Townsville"
}, {
"geometry": {
"type": "Point",
"coordinates": [147.167, -9.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Port_Moresby",
"city": "Port Moresby"
},
"id": "Port Moresby"
}, {
"geometry": {
"type": "Point",
"coordinates": [147.317, -42.883]
},
"type": "Feature",
"properties": {
"wikipedia": "Hobart",
"city": "Hobart"
},
"id": "Hobart"
}, {
"geometry": {
"type": "Point",
"coordinates": [149.117, -35.3]
},
"type": "Feature",
"properties": {
"wikipedia": "Canberra",
"city": "Canberra"
},
"id": "Canberra"
}, {
"geometry": {
"type": "Point",
"coordinates": [150.5, -23.367]
},
"type": "Feature",
"properties": {
"wikipedia": "Rockhampton",
"city": "Rockhampton"
},
"id": "Rockhampton"
}, {
"geometry": {
"type": "Point",
"coordinates": [150.8, 59.567]
},
"type": "Feature",
"properties": {
"wikipedia": "Magadan",
"city": "Magadan"
},
"id": "Magadan"
}, {
"geometry": {
"type": "Point",
"coordinates": [150.883, -34.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Wollongong",
"city": "Wollongong"
},
"id": "Wollongong"
}, {
"geometry": {
"type": "Point",
"coordinates": [151.2, -33.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Sydney",
"city": "Sydney"
},
"id": "Sydney"
}, {
"geometry": {
"type": "Point",
"coordinates": [151.75, -32.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Newcastle,_New_South_Wales",
"city": "Newcastle"
},
"id": "Newcastle"
}, {
"geometry": {
"type": "Point",
"coordinates": [151.85, 7.45]
},
"type": "Feature",
"properties": {
"wikipedia": "Weno",
"city": "Weno"
},
"id": "Weno"
}, {
"geometry": {
"type": "Point",
"coordinates": [153.017, -27.467]
},
"type": "Feature",
"properties": {
"wikipedia": "Brisbane",
"city": "Brisbane"
},
"id": "Brisbane"
}, {
"geometry": {
"type": "Point",
"coordinates": [153.55, -28.167]
},
"type": "Feature",
"properties": {
"wikipedia": "Gold_Coast,_Queensland",
"city": "Gold Coast"
},
"id": "Gold Coast"
}, {
"geometry": {
"type": "Point",
"coordinates": [158.183, 6.917]
},
"type": "Feature",
"properties": {
"wikipedia": "Palikir",
"city": "Palikir"
},
"id": "Palikir"
}, {
"geometry": {
"type": "Point",
"coordinates": [158.65, 53.017]
},
"type": "Feature",
"properties": {
"wikipedia": "Petropavlovsk-Kamchatsky",
"city": "Petropavlovsk-Kamchatsky"
},
"id": "Petropavlovsk-Kamchatsky"
}, {
"geometry": {
"type": "Point",
"coordinates": [159.95, -9.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Honiara",
"city": "Honiara"
},
"id": "Honiara"
}, {
"geometry": {
"type": "Point",
"coordinates": [166.45, -22.267]
},
"type": "Feature",
"properties": {
"wikipedia": "Noum%C3%A9a",
"city": "Noum%C3%A9a"
},
"id": "Noum%C3%A9a"
}, {
"geometry": {
"type": "Point",
"coordinates": [166.917, -0.55]
},
"type": "Feature",
"properties": {
"wikipedia": "Yaren_District",
"city": "Yaren District"
},
"id": "Yaren District"
}, {
"geometry": {
"type": "Point",
"coordinates": [168.3, -17.75]
},
"type": "Feature",
"properties": {
"wikipedia": "Port_Vila",
"city": "Port Vila"
},
"id": "Port Vila"
}, {
"geometry": {
"type": "Point",
"coordinates": [168.3, -46.417]
},
"type": "Feature",
"properties": {
"wikipedia": "Invercargill",
"city": "Invercargill"
},
"id": "Invercargill"
}, {
"geometry": {
"type": "Point",
"coordinates": [170.5, -45.867]
},
"type": "Feature",
"properties": {
"wikipedia": "Dunedin",
"city": "Dunedin"
},
"id": "Dunedin"
}, {
"geometry": {
"type": "Point",
"coordinates": [171.267, 7.067]
},
"type": "Feature",
"properties": {
"wikipedia": "Majuro",
"city": "Majuro"
},
"id": "Majuro"
}, {
"geometry": {
"type": "Point",
"coordinates": [172.617, -43.533]
},
"type": "Feature",
"properties": {
"wikipedia": "Christchurch",
"city": "Christchurch"
},
"id": "Christchurch"
}, {
"geometry": {
"type": "Point",
"coordinates": [172.983, 1.317]
},
"type": "Feature",
"properties": {
"wikipedia": "South_Tarawa",
"city": "South Tarawa"
},
"id": "South Tarawa"
}, {
"geometry": {
"type": "Point",
"coordinates": [174.767, -41.283]
},
"type": "Feature",
"properties": {
"wikipedia": "Wellington",
"city": "Wellington"
},
"id": "Wellington"
}, {
"geometry": {
"type": "Point",
"coordinates": [174.783, -36.85]
},
"type": "Feature",
"properties": {
"wikipedia": "Auckland",
"city": "Auckland"
},
"id": "Auckland"
}, {
"geometry": {
"type": "Point",
"coordinates": [176.183, -13.283]
},
"type": "Feature",
"properties": {
"wikipedia": "Mata-Utu",
"city": "Mata-Utu"
},
"id": "Mata-Utu"
}, {
"geometry": {
"type": "Point",
"coordinates": [177.5, 64.733]
},
"type": "Feature",
"properties": {
"wikipedia": "Anadyr_(town)",
"city": "Anadyr (town)"
},
"id": "Anadyr (town)"
}, {
"geometry": {
"type": "Point",
"coordinates": [178.433, -18.133]
},
"type": "Feature",
"properties": {
"wikipedia": "Suva",
"city": "Suva"
},
"id": "Suva"
}, {
"geometry": {
"type": "Point",
"coordinates": [179.217, -8.517]
},
"type": "Feature",
"properties": {
"wikipedia": "Funafuti",
"city": "Funafuti"
},
"id": "Funafuti"
}, {
"geometry": {
"type": "Point",
"coordinates": [179.367, -16.433]
},
"type": "Feature",
"properties": {
"wikipedia": "Labasa",
"city": "Labasa"
},
"id": "Labasa"
}, {
"geometry": {
"type": "Point",
"coordinates": [179.85, -9.383]
},
"type": "Feature",
"properties": {
"wikipedia": "Nukulaelae",
"city": "Nukulaelae"
},
"id": "Nukulaelae"
}]
}

